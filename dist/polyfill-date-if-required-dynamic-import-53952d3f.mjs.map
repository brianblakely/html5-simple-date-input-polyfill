{"version":3,"file":"polyfill-date-if-required-dynamic-import-53952d3f.mjs","sources":["../src/dateInputIsSupported.js","../src/FindInputsHelper.js","../src/polyfill-date-if-required-dynamic-import.js"],"sourcesContent":["const dateInputIsSupported = doesSupportDateInput();\r\n\r\nexport { dateInputIsSupported }\r\n\r\nfunction doesSupportDateInput() {\r\n  const input = document.createElement('input');\r\n  input.setAttribute('type', 'date');\r\n\r\n  const notADateValue = 'not-a-date';\r\n  input.setAttribute('value', notADateValue);\r\n  return input.value !== notADateValue;\r\n}\r\n","import { dateInputIsSupported } from './dateInputIsSupported.js';\r\nconst pickerAppliedAttr = 'data-has-picker';\r\nconst forcePickerAttr = 'data-nodep-date-input-polyfill-debug';\r\n\r\nclass FindInputsHelper {\r\n  constructor({ allowForcePicker = false} = {}) {\r\n    this.allowForcePicker = allowForcePicker;\r\n  }\r\n\r\n  requiresPolyfilling(el) {\r\n      return el && el.tagName === 'INPUT' && el.getAttribute('type') === 'date' && !el.hasAttribute(pickerAppliedAttr)\r\n          && (!dateInputIsSupported || (this.allowForcePicker && el.closest(`[${forcePickerAttr}]`) !== null));\r\n  }\r\n\r\n  getAllInputsForPolyfilling() {\r\n      // keeping logic in 1 place for now - see commented out code below for alternative\r\n      return Array.from(document.getElementsByTagName('input')).filter((el) => this.requiresPolyfilling(el)) \r\n        || [];\r\n      /*\r\n      if (supported) {\r\n        document.querySelectorAll(`input[type=\"date\"][${forcePicker}]:not([${pickerApplied}]), [${forcePicker}] input[type=\"date\"]:not([${pickerApplied}])`);\r\n      } else {\r\n        return document.querySelectorAll(`input[type=\"date\"]:not([${pickerApplied}])`);\r\n      }\r\n      */\r\n  }\r\n}\r\n\r\nexport { pickerAppliedAttr, forcePickerAttr, FindInputsHelper }\r\n","import { dateInputIsSupported } from './dateInputIsSupported.js';\r\nimport { forcePickerAttr } from './FindInputsHelper.js'\r\n\r\n// Run the above code on any <input type=\"date\"> in the document, also on dynamically created ones.\r\n// Check if type=\"date\" is supported.\r\nexport function polyfillDateIfRequired({ watchForInsert = false, allowForcePicker = false } = {}) {\r\n  if (dateInputIsSupported && !(allowForcePicker && document.querySelector(`[${forcePickerAttr}]`))) {\r\n    return Promise.resolve();\r\n  } else {\r\n    return import('./addPickers.js').then((module) => {\r\n      return new Promise((resolve, _reject) => {\r\n        let pickerAdded = false;\r\n        const loaded = () => {\r\n          if (!pickerAdded) {\r\n            module.addPickers({ watchForInsert, allowForcePicker });\r\n            resolve();\r\n            pickerAdded = true;\r\n          }\r\n        }\r\n        if (document.readyState === 'complete') {\r\n          loaded();\r\n        } else {\r\n          document.addEventListener('DOMContentLoaded', loaded);\r\n          window.addEventListener('load', loaded);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}"],"names":["dateInputIsSupported","input","document","createElement","setAttribute","value","doesSupportDateInput","pickerAppliedAttr","FindInputsHelper","[object Object]","allowForcePicker","this","el","tagName","getAttribute","hasAttribute","closest","Array","from","getElementsByTagName","filter","requiresPolyfilling","polyfillDateIfRequired","watchForInsert","querySelector","import","then","module","Promise","resolve","_reject","pickerAdded","loaded","addPickers","readyState","addEventListener","window"],"mappings":";AAAK,MAACA,EAIN,WACE,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,aAAa,OAAQ,QAI3B,OADAH,EAAMG,aAAa,QADG,cAAA,eAEfH,EAAMI,MAVcC,GCCxB,MAACC,EAAoB,kBAG1B,MAAMC,EACJC,aAAYC,iBAAEA,GAAmB,GAAS,IACxCC,KAAKD,iBAAmBA,EAG1BD,oBAAoBG,GAChB,OAAOA,GAAqB,UAAfA,EAAGC,SAAmD,SAA5BD,EAAGE,aAAa,UAAuBF,EAAGG,aAT7D,sBAUXf,GAAyBW,KAAKD,kBAA2D,OAAvCE,EAAGI,QAAQ,2CAG1EP,6BAEI,OAAOQ,MAAMC,KAAKhB,SAASiB,qBAAqB,UAAUC,OAAQR,GAAOD,KAAKU,oBAAoBT,KAC7F,ICZJ,SAASU,GAAuBC,eAAEA,GAAiB,EAAKb,iBAAEA,GAAmB,GAAU,IAC5F,OAAIV,GAA0BU,GAAoBR,SAASsB,cAAc,0CAGhEC,OAAO,6BAAmBC,KAAMC,GAC9B,IAAIC,QAAQ,CAACC,EAASC,KAC3B,IAAIC,GAAc,EAClB,MAAMC,EAAS,KACRD,IACHJ,EAAOM,WAAW,CAAEV,eAAAA,EAAgBb,iBAAAA,IACpCmB,IACAE,GAAc,IAGU,aAAxB7B,SAASgC,WACXF,KAEA9B,SAASiC,iBAAiB,mBAAoBH,GAC9CI,OAAOD,iBAAiB,OAAQH,OAhB/BJ,QAAQC"}