(function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.5',
	  mode:  'global',
	  copyright: 'Â© 2020 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$1();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
	    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	  }
	  if (O === global_1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
	});
	});

	var path = global_1;

	var aFunction = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var aFunction$1 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
	  aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var SPECIES = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6)
	};

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var defineProperty = Object.defineProperty;
	var cache = {};

	var thrower = function (it) { throw it; };

	var arrayMethodUsesToLength = function (METHOD_NAME, options) {
	  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
	  if (!options) options = {};
	  var method = [][METHOD_NAME];
	  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
	  var argument0 = has(options, 0) ? options[0] : thrower;
	  var argument1 = has(options, 1) ? options[1] : undefined;

	  return cache[METHOD_NAME] = !!method && !fails(function () {
	    if (ACCESSORS && !descriptors) return true;
	    var O = { length: -1 };

	    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
	    else O[1] = 1;

	    method.call(O, argument0, argument1);
	  });
	};

	var $forEach = arrayIteration.forEach;



	var STRICT_METHOD = arrayMethodIsStrict('forEach');
	var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
	    createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype.forEach = arrayForEach;
	  }
	}

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process = global_1.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var engineV8Version = version && +version;

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$1] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $filter = arrayIteration.filter;



	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
	// Edge 14- issue
	var USES_TO_LENGTH$1 = arrayMethodUsesToLength('filter');

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH$1 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterators = {};

	var ITERATOR = wellKnownSymbol('iterator');
	var ArrayPrototype = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR] === it);
	};

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	var ITERATOR$1 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$1]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$2] = function () {
	    return this;
	  };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$2] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
	  from: arrayFrom
	});

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	// `Object.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	if (!toStringTagSupport) {
	  redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
	}

	var nativePromiseConstructor = global_1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var defineProperty$1 = objectDefineProperty.f;



	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG$2)) {
	    defineProperty$1(it, TO_STRING_TAG$2, { configurable: true, value: TAG });
	  }
	};

	var SPECIES$2 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$2]) {
	    defineProperty(Constructor, SPECIES$2, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = functionBindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var SPECIES$3 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aFunction$1(S);
	};

	var html = getBuiltIn('document', 'documentElement');

	var engineIsIos = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

	var location = global_1.location;
	var set$1 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process$1 = global_1.process;
	var MessageChannel = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location.protocol + '//' + location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw(process$1) == 'process') {
	    defer = function (id) {
	      process$1.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !engineIsIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    global_1.addEventListener &&
	    typeof postMessage == 'function' &&
	    !global_1.importScripts &&
	    !fails(post) &&
	    location.protocol !== 'file:'
	  ) {
	    defer = post;
	    global_1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

	var macrotask = task.set;


	var MutationObserver$1 = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$2 = global_1.process;
	var Promise$1 = global_1.Promise;
	var IS_NODE = classofRaw(process$2) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE && (parent = process$2.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE) {
	    notify = function () {
	      process$2.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver$1 && !engineIsIos) {
	    toggle = true;
	    node = document.createTextNode('');
	    new MutationObserver$1(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    then = promise.then;
	    notify = function () {
	      then.call(promise, flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction$1(resolve);
	  this.reject = aFunction$1(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$5 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$5
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var task$1 = task.set;










	var SPECIES$4 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState = internalState.get;
	var setInternalState = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$2 = global_1.document;
	var process$3 = global_1.process;
	var $fetch = getBuiltIn('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw(process$3) == 'process';
	var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED = isForced_1(PROMISE, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (engineV8Version === 66) return true;
	    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
	  }
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = PromiseConstructor.resolve(1);
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$4] = FakePromise;
	  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION$1 = FORCED || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(promise, state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$2.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE$1) {
	          process$3.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    if (IS_NODE$1) {
	      process$3.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind(internalResolve, promise, wrapper, state),
	            bind(internalReject, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(promise, state, false);
	    }
	  } catch (error) {
	    internalReject(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction$1(executor);
	    Internal.call(this);
	    var state = getInternalState(this);
	    try {
	      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
	    } catch (error) {
	      internalReject(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    setInternalState(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$1 ? process$3.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, promise, state);
	    this.reject = bind(internalReject, promise, state);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if ( typeof nativePromiseConstructor == 'function') {
	    nativeThen = nativePromiseConstructor.prototype.then;

	    // wrap native Promise#then for native async functions
	    redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
	      var that = this;
	      return new PromiseConstructor(function (resolve, reject) {
	        nativeThen.call(that, resolve, reject);
	      }).then(onFulfilled, onRejected);
	    // https://github.com/zloirock/core-js/issues/640
	    }, { unsafe: true });

	    // wrap fetch result
	    if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
	      // eslint-disable-next-line no-unused-vars
	      fetch: function fetch(input /* , init */) {
	        return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: FORCED }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced:  FORCED }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve( this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION$1 }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      iterate_1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$2 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$2(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$2(true)
	};

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO = sharedKey('IE_PROTO');
	var ObjectPrototype = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype : null;
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () { return this; };

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	if ( !has(IteratorPrototype, ITERATOR$3)) {
	  createNonEnumerableProperty(IteratorPrototype, ITERATOR$3, returnThis);
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO$1] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$4 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$4]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$4] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$4, returnThis$2);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if ( IterablePrototype[ITERATOR$4] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$4, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var charAt = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$1 = internalState.set;
	var getInternalState$1 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$1(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$1(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _readOnlyError(name) {
	  throw new Error("\"" + name + "\" is read-only");
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(n);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	var dateInputIsSupported = doesSupportDateInput();

	function doesSupportDateInput() {
	  var input = document.createElement('input');
	  input.setAttribute('type', 'date');
	  var notADateValue = 'not-a-date';
	  input.setAttribute('value', notADateValue);
	  return input.value !== notADateValue;
	}

	var pickerAppliedAttr = 'data-has-picker';
	var forcePickerAttr = 'data-nodep-date-input-polyfill-debug';

	var FindInputsHelper = /*#__PURE__*/function () {
	  function FindInputsHelper() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref$allowForcePicker = _ref.allowForcePicker,
	        allowForcePicker = _ref$allowForcePicker === void 0 ? false : _ref$allowForcePicker;

	    _classCallCheck(this, FindInputsHelper);

	    this.allowForcePicker = allowForcePicker;
	  }

	  _createClass(FindInputsHelper, [{
	    key: "requiresPolyfilling",
	    value: function requiresPolyfilling(el) {
	      return el && el.tagName === 'INPUT' && el.getAttribute('type') === 'date' && !el.hasAttribute(pickerAppliedAttr) && (!dateInputIsSupported || this.allowForcePicker && el.closest("[".concat(forcePickerAttr, "]")) !== null);
	    }
	  }, {
	    key: "getAllInputsForPolyfilling",
	    value: function getAllInputsForPolyfilling() {
	      var _this = this;

	      // keeping logic in 1 place for now - see commented out code below for alternative
	      return Array.from(document.getElementsByTagName('input')).filter(function (el) {
	        return _this.requiresPolyfilling(el);
	      }) || [];
	      /*
	      if (supported) {
	        document.querySelectorAll(`input[type="date"][${forcePicker}]:not([${pickerApplied}]), [${forcePicker}] input[type="date"]:not([${pickerApplied}])`);
	      } else {
	        return document.querySelectorAll(`input[type="date"]:not([${pickerApplied}])`);
	      }
	      */
	    }
	  }]);

	  return FindInputsHelper;
	}(); // Run the above code on any <input type="date"> in the document, also on dynamically created ones.
	// Check if type="date" is supported.


	function polyfillDateIfRequired() {
	  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref2$watchForInsert = _ref2.watchForInsert,
	      watchForInsert = _ref2$watchForInsert === void 0 ? false : _ref2$watchForInsert,
	      _ref2$allowForcePicke = _ref2.allowForcePicker,
	      allowForcePicker = _ref2$allowForcePicke === void 0 ? false : _ref2$allowForcePicke;

	  if (dateInputIsSupported && !(allowForcePicker && document.querySelector("[".concat(forcePickerAttr, "]")))) {
	    return Promise.resolve();
	  } else {
	    Promise.resolve().then(function () { return addPickers08ced8bc; }).then(function (module) {
	      return new Promise(function (resolve, _reject) {
	        var pickerAdded = false;

	        var loaded = function loaded() {
	          if (!pickerAdded) {
	            module.addPickers({
	              watchForInsert: watchForInsert,
	              allowForcePicker: allowForcePicker
	            });
	            resolve();
	            pickerAdded = true;
	          }
	        };

	        if (document.readyState === 'complete') {
	          loaded();
	        } else {
	          document.addEventListener('DOMContentLoaded', loaded);
	          window.addEventListener('load', loaded);
	        }
	      });
	    });
	  }
	}

	if (window.__gest_age_script_loaded) {
	  // https://gist.github.com/samthor/64b114e4a4f539915a95b91ffd340acc
	  throw new error("nodep-date-input-polyfill has been executed twice - usually a Safari bug");
	}

	window.__gest_age_script_loaded = true;
	function gestAgePageScript() {
	  var targetDateEl = document.getElementById('targetDate');
	  var lmpDateEl = document.getElementById('lmpDate');
	  var scanEddEl = document.getElementById('scanEdd');
	  var msPerDay = 86400000;
	  var termGestMs = 24192000000; // 40 weeks in ms

	  polyfillDateIfRequired().then(function () {
	    if (targetDateEl.valueAsDate === null) {
	      setTargetNow();
	    }

	    elChange({
	      target: targetDateEl
	    });
	  });
	  [targetDateEl, lmpDateEl, scanEddEl].forEach(function (el) {
	    el.addEventListener('input', elChange, {
	      passive: true
	    });
	  });
	  document.getElementsByTagName('form')[0].addEventListener('reset', function () {
	    var cont = document.querySelectorAll('.output-container');

	    for (var i = 0; i < cont.length; ++i) {
	      //ie11 compat
	      cont[i].classList.add('hidden');
	    }

	    if (lmpDateEl.getAttribute('data-has-picker') !== null) {
	      // this is if the datepicker polyfill is used
	      setTimeout(function () {
	        [lmpDateEl, scanEddEl].forEach(function (el) {
	          el.value = '';
	        });
	      }, 1);
	    }

	    setTimeout(setTargetNow, 1);
	  });

	  function setTargetNow() {
	    var now = new Date();
	    now.setTime(now.getTime() - now.getTimezoneOffset() * 60000);
	    targetDateEl.valueAsDate = now;
	  }

	  function elChange(evt) {
	    var maxOverTermMs = 4233600000; // 7 weeks in ms - 3 weeks for over term and 4 weeks max difference dates/scan

	    var overDatesMs = termGestMs + maxOverTermMs;
	    var eddByLmpOut = document.getElementById('eddByLmp');
	    var lmpWeeksOut = document.getElementById('lmpCgaWeeks');
	    var lmpDaysOut = document.getElementById('lmpCgaDays');
	    var eddWeeksOut = document.getElementById('eddCgaWeeks');
	    var eddDaysOut = document.getElementById('eddCgaDays');
	    var lmpDate = lmpDateEl.valueAsDate;
	    var scanEdd = scanEddEl.valueAsDate;
	    var targetDate = targetDateEl.valueAsDate;
	    var lwd;
	    var ewd;

	    if (evt.target === targetDateEl) {
	      if (targetDate) {
	        lmpDateEl.min = asYMD(targetDate.getTime() - overDatesMs);
	        lmpDateEl.max = asYMD(targetDate);
	        scanEddEl.min = asYMD(targetDate.getTime() - maxOverTermMs);
	        scanEddEl.max = asYMD(targetDate.getTime() + overDatesMs);
	      } else {
	        lmpDateEl.min = lmpDateEl.max = scanEddEl.min = scanEddEl.max = '';
	      }
	    }

	    if (lmpDate) {
	      var lmpEdd = new Date(lmpDate.getTime() + termGestMs); // ie 11 hack - doesn't have an output element with a value

	      eddByLmpOut.innerHTML = lmpEdd.toLocaleDateString(void 0, {
	        year: 'numeric',
	        month: 'short',
	        day: 'numeric',
	        weekday: 'short'
	      });
	    }

	    containerVis(eddByLmpOut, lmpDate);

	    if (targetDate) {
	      if (lmpDate) {
	        lwd = cgaByLMP(lmpDate, targetDate);
	        lmpWeeksOut.innerHTML = lwd.weeks;
	        lmpDaysOut.innerHTML = lwd.days;
	      }

	      if (scanEdd) {
	        ewd = cgaByEDD(scanEdd, targetDate);
	        eddWeeksOut.innerHTML = ewd.weeks;
	        eddDaysOut.innerHTML = ewd.days;
	      }
	    }

	    containerVis(lmpWeeksOut, lwd);
	    containerVis(eddWeeksOut, ewd);
	  }

	  function containerVis(el, isVis) {
	    do {
	      el = el.parentNode;
	    } while (!el.classList.contains('output-container'));

	    if (isVis) {
	      el.classList.remove('hidden');
	    } else {
	      el.classList.add('hidden');
	    }
	  }

	  function weeksDays(days) {
	    var weeks = Math.floor(days / 7);
	    days = Math.floor(days - weeks * 7);

	    if (weeks > 44) {
	      weeks = '> 43';
	      days = 'N/A';
	    }

	    if (weeks < 0) {
	      weeks = '< 0';
	      days = 'N/A';
	    }

	    return {
	      weeks: weeks,
	      days: days
	    }; // ie11 compatability!
	  }

	  function cgaByLMP(lmp, onDate) {
	    var days = (onDate.getTime() - lmp.getTime()) / msPerDay;
	    return weeksDays(days);
	  }

	  function cgaByEDD(edd, onDate) {
	    var days = 280 - (edd.getTime() - onDate.getTime()) / msPerDay; // 280 = 40 weeks * 7 days/week

	    return weeksDays(days);
	  }

	  function asYMD(dt) {
	    if (typeof dt === 'number') {
	      dt = new Date(dt);
	    }

	    return dt.toISOString().substring(0, 10);
	  }
	}

	gestAgePageScript();

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$1 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED$1 }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype$1 = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype$1[UNSCOPABLES] == undefined) {
	  objectDefineProperty.f(ArrayPrototype$1, UNSCOPABLES, {
	    configurable: true,
	    value: objectCreate(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
	  ArrayPrototype$1[UNSCOPABLES][key] = true;
	};

	var $find = arrayIteration.find;



	var FIND = 'find';
	var SKIPS_HOLES = true;

	var USES_TO_LENGTH$2 = arrayMethodUsesToLength(FIND);

	// Shouldn't skip holes
	if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

	// `Array.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.find
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH$2 }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables(FIND);

	var $includes = arrayIncludes.includes;



	var USES_TO_LENGTH$3 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true, forced: !USES_TO_LENGTH$3 }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('includes');

	var $indexOf = arrayIncludes.indexOf;



	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');
	var USES_TO_LENGTH$4 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$1 || !USES_TO_LENGTH$4 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? nativeIndexOf.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var nativeJoin = [].join;

	var ES3_STRINGS = indexedObject != Object;
	var STRICT_METHOD$2 = arrayMethodIsStrict('join', ',');

	// `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$2 }, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH$5 = arrayMethodUsesToLength('map');

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$5 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('slice');
	var USES_TO_LENGTH$6 = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

	var SPECIES$5 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$1 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$6 }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$5];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var nativeAssign = Object.assign;
	var defineProperty$2 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$2({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$2(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor$1(1); });
	var FORCED$2 = !descriptors || FAILS_ON_PRIMITIVES;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED$2, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$1(toIndexedObject(it), key);
	  }
	});

	var FAILS_ON_PRIMITIVES$1 = fails(function () { objectGetPrototypeOf(1); });

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1, sham: !correctPrototypeGetter }, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return objectGetPrototypeOf(toObject(it));
	  }
	});

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    typeof (NewTarget = dummy.constructor) == 'function' &&
	    NewTarget !== Wrapper &&
	    isObject(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
	// so we use an intermediate function.
	function RE(s, f) {
	  return RegExp(s, f);
	}

	var UNSUPPORTED_Y = fails(function () {
	  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	  var re = RE('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});

	var BROKEN_CARET = fails(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = RE('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});

	var regexpStickyHelpers = {
		UNSUPPORTED_Y: UNSUPPORTED_Y,
		BROKEN_CARET: BROKEN_CARET
	};

	var defineProperty$3 = objectDefineProperty.f;
	var getOwnPropertyNames = objectGetOwnPropertyNames.f;





	var setInternalState$2 = internalState.set;



	var MATCH$1 = wellKnownSymbol('match');
	var NativeRegExp = global_1.RegExp;
	var RegExpPrototype = NativeRegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;

	// "new" should create a new object, old webkit bug
	var CORRECT_NEW = new NativeRegExp(re1) !== re1;

	var UNSUPPORTED_Y$1 = regexpStickyHelpers.UNSUPPORTED_Y;

	var FORCED$3 = descriptors && isForced_1('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y$1 || fails(function () {
	  re2[MATCH$1] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	})));

	// `RegExp` constructor
	// https://tc39.github.io/ecma262/#sec-regexp-constructor
	if (FORCED$3) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = this instanceof RegExpWrapper;
	    var patternIsRegExp = isRegexp(pattern);
	    var flagsAreUndefined = flags === undefined;
	    var sticky;

	    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
	      return pattern;
	    }

	    if (CORRECT_NEW) {
	      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
	    } else if (pattern instanceof RegExpWrapper) {
	      if (flagsAreUndefined) flags = regexpFlags.call(pattern);
	      pattern = pattern.source;
	    }

	    if (UNSUPPORTED_Y$1) {
	      sticky = !!flags && flags.indexOf('y') > -1;
	      if (sticky) flags = flags.replace(/y/g, '');
	    }

	    var result = inheritIfRequired(
	      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
	      thisIsRegExp ? this : RegExpPrototype,
	      RegExpWrapper
	    );

	    if (UNSUPPORTED_Y$1 && sticky) setInternalState$2(result, { sticky: sticky });

	    return result;
	  };
	  var proxy = function (key) {
	    key in RegExpWrapper || defineProperty$3(RegExpWrapper, key, {
	      configurable: true,
	      get: function () { return NativeRegExp[key]; },
	      set: function (it) { NativeRegExp[key] = it; }
	    });
	  };
	  var keys$1 = getOwnPropertyNames(NativeRegExp);
	  var index = 0;
	  while (keys$1.length > index) proxy(keys$1[index++]);
	  RegExpPrototype.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype;
	  redefine(global_1, 'RegExp', RegExpWrapper);
	}

	// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
	setSpecies('RegExp');

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y$2 = regexpStickyHelpers.UNSUPPORTED_Y || regexpStickyHelpers.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$2;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;
	    var sticky = UNSUPPORTED_Y$2 && re.sticky;
	    var flags = regexpFlags.call(re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = flags.replace('y', '');
	      if (flags.indexOf('g') === -1) {
	        flags += 'g';
	      }

	      strCopy = String(str).slice(re.lastIndex);
	      // Support anchored sticky behavior.
	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      }
	      // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.
	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = nativeExec.call(sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = match.input.slice(charsAdded);
	        match[0] = match[0].slice(charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
	  exec: regexpExec
	});

	var TO_STRING = 'toString';
	var RegExpPrototype$1 = RegExp.prototype;
	var nativeToString = RegExpPrototype$1[TO_STRING];

	var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = nativeToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject(this);
	    var p = String(R.source);
	    var rf = R.flags;
	    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype$1) ? regexpFlags.call(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH$2 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (e) {
	    try {
	      regexp[MATCH$2] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (f) { /* empty */ }
	  } return false;
	};

	// `String.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~String(requireObjectCoercible(this))
	      .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible(this));
	  var result = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	// https://github.com/tc39/proposal-string-pad-start-end




	var ceil$1 = Math.ceil;

	// `String.prototype.{ padStart, padEnd }` methods implementation
	var createMethod$3 = function (IS_END) {
	  return function ($this, maxLength, fillString) {
	    var S = String(requireObjectCoercible($this));
	    var stringLength = S.length;
	    var fillStr = fillString === undefined ? ' ' : String(fillString);
	    var intMaxLength = toLength(maxLength);
	    var fillLen, stringFiller;
	    if (intMaxLength <= stringLength || fillStr == '') return S;
	    fillLen = intMaxLength - stringLength;
	    stringFiller = stringRepeat.call(fillStr, ceil$1(fillLen / fillStr.length));
	    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	    return IS_END ? S + stringFiller : stringFiller + S;
	  };
	};

	var stringPad = {
	  // `String.prototype.padStart` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	  start: createMethod$3(false),
	  // `String.prototype.padEnd` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
	  end: createMethod$3(true)
	};

	// https://github.com/zloirock/core-js/issues/280


	// eslint-disable-next-line unicorn/no-unsafe-regex
	var stringPadWebkitBug = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(engineUserAgent);

	var $padStart = stringPad.start;


	// `String.prototype.padStart` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	_export({ target: 'String', proto: true, forced: stringPadWebkitBug }, {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// TODO: Remove from `core-js@4` since it's moved to entry points







	var SPECIES$6 = wellKnownSymbol('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
	  return 'a'.replace(/./, '$0') === '$0';
	})();

	var REPLACE = wellKnownSymbol('replace');
	// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
	  if (/./[REPLACE]) {
	    return /./[REPLACE]('a', '$0') === '';
	  }
	  return false;
	})();

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
	  var SYMBOL = wellKnownSymbol(KEY);

	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$6] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    (KEY === 'replace' && !(
	      REPLACE_SUPPORTS_NAMED_GROUPS &&
	      REPLACE_KEEPS_$0 &&
	      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
	    )) ||
	    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      if (regexp.exec === regexpExec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	        }
	        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	      }
	      return { done: false };
	    }, {
	      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
	      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
	    });
	    var stringMethod = methods[0];
	    var regexMethod = methods[1];

	    redefine(String.prototype, KEY, stringMethod);
	    redefine(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return regexMethod.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return regexMethod.call(string, this); }
	    );
	  }

	  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
	};

	var charAt$1 = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt$1(S, index).length : 1);
	};

	// `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }

	  if (classofRaw(R) !== 'RegExp') {
	    throw TypeError('RegExp#exec called on incompatible receiver');
	  }

	  return regexpExec.call(R, S);
	};

	var max$2 = Math.max;
	var min$2 = Math.min;
	var floor$1 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
	  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
	  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

	  return [
	    // `String.prototype.replace` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible(this);
	      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return replacer !== undefined
	        ? replacer.call(searchValue, O, replaceValue)
	        : nativeReplace.call(String(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	    function (regexp, replaceValue) {
	      if (
	        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
	        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
	      ) {
	        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
	        if (res.done) return res.value;
	      }

	      var rx = anObject(regexp);
	      var S = String(this);

	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = String(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regexpExecAbstract(rx, S);
	        if (result === null) break;

	        results.push(result);
	        if (!global) break;

	        var matchStr = String(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = String(result[0]);
	        var position = max$2(min$2(toInteger(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = String(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];

	  // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return nativeReplace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$': return '$';
	        case '&': return matched;
	        case '`': return str.slice(0, position);
	        case "'": return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default: // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor$1(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	var arrayPush = [].push;
	var min$3 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(requireObjectCoercible(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegexp(separator)) {
	        return nativeSplit.call(string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output.length > lim ? output.slice(0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(String(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (regexp, limit) {
	      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);
	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (SUPPORTS_Y ? 'y' : 'g');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = SUPPORTS_Y ? q : 0;
	        var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	        var e;
	        if (
	          z === null ||
	          (e = min$3(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	}, !SUPPORTS_Y);

	function styleInject(css, ref) {
	  if (ref === void 0) ref = {};
	  var insertAt = ref.insertAt;

	  if (!css || typeof document === 'undefined') {
	    return;
	  }

	  var head = document.head || document.getElementsByTagName('head')[0];
	  var style = document.createElement('style');
	  style.type = 'text/css';

	  if (insertAt === 'top') {
	    if (head.firstChild) {
	      head.insertBefore(style, head.firstChild);
	    } else {
	      head.appendChild(style);
	    }
	  } else {
	    head.appendChild(style);
	  }

	  if (style.styleSheet) {
	    style.styleSheet.cssText = css;
	  } else {
	    style.appendChild(document.createTextNode(css));
	  }
	}

	var css_248z = "date-input-polyfill {\n  background: #fff;\n  color: #000;\n  text-shadow: none;\n  border: 0;\n  padding: 0;\n  height: auto;\n  width: auto;\n  line-height: normal;\n  border-radius: 0;\n  font-family: sans-serif;\n  font-size: 14px;\n  position: absolute !important;\n  text-align: center;\n  box-shadow: 0 7px 8px -4px rgba(0, 0, 0, 0.2), 0 12px 17px 2px rgba(0, 0, 0, 0.14), 0 5px 22px 4px rgba(0, 0, 0, 0.12);\n  cursor: default;\n  z-index: 1; }\n  date-input-polyfill[data-open=\"false\"] {\n    display: none; }\n  date-input-polyfill[data-open=\"true\"] {\n    display: block; }\n  date-input-polyfill select, date-input-polyfill table, date-input-polyfill th, date-input-polyfill td {\n    background: #fff;\n    color: #000;\n    text-shadow: none;\n    border: 0;\n    padding: 0;\n    height: auto;\n    width: auto;\n    line-height: normal;\n    border-radius: 0;\n    font-family: sans-serif;\n    font-size: 14px;\n    box-shadow: none; }\n  date-input-polyfill select, date-input-polyfill button {\n    border: 0;\n    border-bottom: 1px solid #E0E0E0;\n    height: 24px;\n    vertical-align: top; }\n  date-input-polyfill select {\n    width: 50%; }\n    date-input-polyfill select:first-of-type {\n      border-right: 1px solid #E0E0E0;\n      width: 30%; }\n  date-input-polyfill button {\n    padding: 0;\n    width: 20%;\n    background: #E0E0E0; }\n  date-input-polyfill table {\n    border-collapse: collapse; }\n  date-input-polyfill th, date-input-polyfill td {\n    width: 32px;\n    padding: 4px;\n    text-align: center; }\n  date-input-polyfill td[data-day] {\n    cursor: pointer; }\n    date-input-polyfill td[data-day]:hover {\n      background: #E0E0E0; }\n  date-input-polyfill [data-selected] {\n    font-weight: bold;\n    background: #D8EAF6; }\n\ninput[data-has-picker]::-ms-clear {\n  display: none; }\n";
	styleInject(css_248z);

	var Picker = /*#__PURE__*/function () {
	  function Picker() {
	    var _this = this;

	    _classCallCheck(this, Picker);

	    // This is a singleton.
	    if (Picker.instance) {
	      return Picker.instance;
	    }

	    var passiveOpt = {
	      passive: true
	    };
	    this.date = new Date();
	    this.input = null;
	    this.isOpen = false; // The picker element. Unique tag name attempts to protect against
	    // generic selectors.

	    this.container = document.createElement("date-input-polyfill"); // Add controls.
	    // Year picker.

	    this.year = document.createElement("select");
	    Picker.createRangeSelect(this.year, this.date.getFullYear() - 80, this.date.getFullYear() + 20);
	    this.year.className = "yearSelect";
	    this.year.addEventListener("change", function () {
	      _this.date.setYear(_this.year.value);

	      _this.refreshDaysMatrix();
	    }, passiveOpt);
	    this.container.appendChild(this.year); // Month picker.

	    this.month = document.createElement("select");
	    this.month.className = "monthSelect";
	    this.month.addEventListener("change", function () {
	      _this.date.setMonth(_this.month.value);

	      _this.refreshDaysMatrix();
	    }, passiveOpt);
	    this.container.appendChild(this.month); // Today button.

	    this.today = document.createElement("button");
	    this.today.textContent = "Today";
	    this.today.addEventListener("click", function () {
	      _this.date = new Date();

	      _this.setInput();
	    }, passiveOpt);
	    this.container.appendChild(this.today); // Setup unchanging DOM for days matrix.

	    var daysMatrix = document.createElement("table");
	    this.daysHead = document.createElement("thead");
	    this.days = document.createElement("tbody"); // THIS IS THE BIG PART.
	    // When the user clicks a day, set that day as the date.
	    // Uses event delegation.

	    this.days.addEventListener("click", function (e) {
	      var tgt = e.target;

	      if (!tgt.hasAttribute("data-day")) {
	        return false;
	      }

	      var curSel = _this.days.querySelector("[data-selected]");

	      if (curSel) {
	        curSel.removeAttribute("data-selected");
	      }

	      tgt.setAttribute("data-selected", '');

	      _this.date.setDate(parseInt(tgt.textContent));

	      _this.setInput();
	    }, passiveOpt);
	    daysMatrix.appendChild(this.daysHead);
	    daysMatrix.appendChild(this.days);
	    this.container.appendChild(daysMatrix);
	    this.hide();
	    document.body.appendChild(this.container); // Close the picker when clicking outside of a date input or picker.

	    document.addEventListener('click', function (e) {
	      var el = e.target;
	      var isPicker = el === _this.container;

	      while (!isPicker && (el = el.parentNode)) {
	        isPicker = el === _this.container;
	      }

	      var attr = e.target.getAttribute('type');

	      if (attr !== 'date' && attr !== 'date-polyfill' && !isPicker) {
	        _this.hide();
	      }
	    }, passiveOpt);
	  } // Hide.


	  _createClass(Picker, [{
	    key: "hide",
	    value: function hide() {
	      this.container.setAttribute('data-open', this.isOpen = false);
	    } // Show.

	  }, {
	    key: "show",
	    value: function show() {
	      this.container.setAttribute('data-open', this.isOpen = true);
	    } // Position picker below element. Align to element's left edge.

	  }, {
	    key: "goto",
	    value: function goto(element) {
	      var rekt = element.getBoundingClientRect();
	      this.container.style.top = "".concat(rekt.top + rekt.height + (document.documentElement.scrollTop || document.body.scrollTop), "px");
	      this.container.style.left = "".concat(rekt.left + (document.documentElement.scrollLeft || document.body.scrollLeft), "px");
	      this.show();
	    } // Initiate I/O with given date input.

	  }, {
	    key: "attachTo",
	    value: function attachTo(input) {
	      if (input === this.input && this.isOpen) {
	        return false;
	      }

	      this.input = input;
	      this.sync();
	      this.goto(this.input.element);
	    } // Match picker date with input date.

	  }, {
	    key: "sync",
	    value: function sync() {
	      if (this.input.element.valueAsDate) {
	        this.date = Picker.absoluteDate(this.input.element.valueAsDate);
	      } else {
	        this.date = new Date();
	      }

	      this.year.value = this.date.getFullYear();
	      this.month.value = this.date.getMonth();
	      this.refreshDaysMatrix();
	    } // Match input date with picker date.

	  }, {
	    key: "setInput",
	    value: function setInput() {
	      var _this2 = this;

	      this.input.element.value = "".concat(this.date.getFullYear(), "-").concat(String(this.date.getMonth() + 1).padStart(2, '0'), "-").concat(String(this.date.getDate()).padStart(2, '0'));
	      this.input.element.focus();
	      setTimeout(function () {
	        // IE wouldn't hide, so in a timeout you go.
	        _this2.hide();
	      }, 100);
	      this.pingInput();
	    }
	  }, {
	    key: "refreshLocale",
	    value: function refreshLocale() {
	      if (this.locale === this.input.locale) {
	        return false;
	      }

	      this.locale = this.input.locale;
	      var daysHeadHTML = ["<tr>"];

	      for (var i = 0, len = this.input.localeText.days.length; i < len; ++i) {
	        daysHeadHTML.push("<th scope=\"col\">".concat(this.input.localeText.days[i], "</th>"));
	      }

	      this.daysHead.innerHTML = daysHeadHTML.join('');
	      Picker.createRangeSelect(this.month, 0, 11, this.input.localeText.months, this.date.getMonth());
	      this.today.textContent = this.input.localeText.today;
	    }
	  }, {
	    key: "refreshDaysMatrix",
	    value: function refreshDaysMatrix() {
	      this.refreshLocale(); // Determine days for this month and year,
	      // as well as on which weekdays they lie.

	      var year = this.date.getFullYear(); // Get the year (2016).

	      var month = this.date.getMonth(); // Get the month number (0-11).

	      var startDay = new Date(year, month, 1).getDay(); // First weekday of month (0-6).

	      var maxDays = new Date(this.date.getFullYear(), month + 1, 0).getDate(); // Get days in month (1-31).
	      // The input's current date.

	      var selDate = Picker.absoluteDate(this.input.element.valueAsDate) || false; // Are we in the input's currently-selected month and year?

	      var selMatrix = selDate && year === selDate.getFullYear() && month === selDate.getMonth(); // Populate days matrix.

	      var matrixHTML = [];

	      for (var i = 0; i < maxDays + startDay; ++i) {
	        // Add a row every 7 days.
	        if (i % 7 === 0) {
	          matrixHTML.push("\n          ".concat(i !== 0 ? "</tr>" : '', "\n          <tr>\n        "));
	        } // Add new column.
	        // If no days from this month in this column, it will be empty.


	        if (i + 1 <= startDay) {
	          matrixHTML.push("<td></td>");
	          continue;
	        } // Populate day number.


	        var dayNum = i + 1 - startDay;
	        var selected = selMatrix && selDate.getDate() === dayNum;
	        matrixHTML.push("<td data-day ".concat(selected ? "data-selected" : '', ">\n          ").concat(dayNum, "\n        </td>"));
	      }

	      this.days.innerHTML = matrixHTML.join('');
	    }
	  }, {
	    key: "pingInput",
	    value: function pingInput() {
	      // Dispatch DOM events to the input.
	      var inputEvent;
	      var changeEvent; // Modern event creation.

	      try {
	        inputEvent = new Event("input");
	        changeEvent = new Event("change");
	      } // Old-fashioned way.
	      catch (e) {
	        inputEvent = document.createEvent("KeyboardEvent");
	        inputEvent.initEvent("input", true, false);
	        changeEvent = document.createEvent("KeyboardEvent");
	        changeEvent.initEvent("change", true, false);
	      }

	      this.input.element.dispatchEvent(inputEvent);
	      this.input.element.dispatchEvent(changeEvent);
	    }
	  }], [{
	    key: "createRangeSelect",
	    value: function createRangeSelect(theSelect, min, max, namesArray, selectedValue) {
	      theSelect.innerHTML = '';

	      for (var i = min; i <= max; ++i) {
	        var aOption = document.createElement("option");
	        theSelect.appendChild(aOption);
	        var theText = namesArray ? namesArray[i - min] : i;
	        aOption.text = theText;
	        aOption.value = i;

	        if (i === selectedValue) {
	          aOption.selected = "selected";
	        }
	      }

	      return theSelect;
	    }
	  }, {
	    key: "absoluteDate",
	    value: function absoluteDate(date) {
	      return date && new Date(date.getTime() + date.getTimezoneOffset() * 60000);
	    }
	  }]);

	  return Picker;
	}();

	Picker.instance = null; // Localizations for UI text.

	function getLocaleFormat(localeNames) {
	  var locales = [["D. M. Y", '_dsb_dsb-de_hsb_hsb-de_sk_sk-sk_'], ["D.M.Y", '_az_az-cyrl_az-cyrl-az_az-latn_az-latn-az_ba_ba-ru_be_be-by_bs_bs-cyrl_bs-cyrl-ba_bs-latn_bs-latn-ba_cs_cs-cz_de_de-at_de-ch_de-de_de-li_de-lu_et_et-ee_fi_fi-fi_fr-ch_hy_hy-am_is_is-is_it-ch_ka_ka-ge_kk_kk-kz_ky_ky-kg_mk_mk-mk_nb_nb-no_nn_nn-no_no_ro_ro-ro_ru_ru-ru_se_se-fi_se-no_sl_sl-si_sma-no_smj-no_smn_smn-fi_sms_sms-fi_sr_sr-cyrl_sr-cyrl-ba_sr-cyrl-cs_sr-cyrl-me_sr-cyrl-rs_sr-latn_sr-latn-ba_sr-latn-cs_sr-latn-me_sr-latn-rs_sv-fi_tg_tg-cyrl_tg-cyrl-tj_tk_tk-tm_tr_tr-tr_tt_tt-ru_uk_uk-ua_uz-cyrl_uz-cyrl-uz_'], ["D.M.Y 'Ð³.'", '_bg_bg-bg_'], ["D.M.Y.", '_hr_hr-ba_hr-hr_'], ["D/M Y", '_uz_uz-latn_uz-latn-uz_'], ["D/M/Y", '_am_am-et_ar_ar-ae_ar-bh_ar-eg_ar-iq_ar-jo_ar-kw_ar-lb_ar-ly_ar-om_ar-qa_ar-sa_ar-sy_ar-ye_br_br-fr_ca_ca-es_co_co-fr_cy_cy-gb_dv_dv-mv_el_el-gr_en-au_en-bz_en-ca_en-gb_en-ie_en-jm_en-my_en-nz_en-sg_en-tt_es_es-ar_es-bo_es-co_es-cr_es-do_es-ec_es-es_es-gt_es-hn_es-mx_es-ni_es-pe_es-pr_es-py_es-sv_es-uy_es-ve_fr_fr-be_fr-fr_fr-lu_fr-mc_ga_ga-ie_gd_gd-gb_gl_gl-es_gsw_gsw-fr_ha_ha-latn_ha-latn-ng_he_he-il_id_id-id_ig_ig-ng_it_it-it_iu_iu-cans_iu-cans-ca_iu-latn_iu-latn-ca_lb_lb-lu_lo_lo-la_mi_mi-nz_ms_ms-bn_ms-my_mt_mt-mt_nl-be_oc_oc-fr_prs_prs-af_ps_ps-af_pt_pt-br_qut_qut-gt_quz_quz-bo_quz-ec_quz-pe_rm_rm-ch_syr_syr-sy_th_th-th_ur_ur-pk_vi_vi-vn_wo_wo-sn_yo_yo-ng_zh-cht_zh-hant_zh-hk_zh-mo_zh-sg_'], ["D-M-Y", '_ar-dz_ar-ma_arn_arn-cl_ar-tn_as_as-in_bn_bn-bd_bn-in_da_da-dk_en-in_es-cl_fo_fo-fo_fy_fy-nl_gu_gu-in_hi_hi-in_kl_kl-gl_kn_kn-in_kok_kok-in_ml_ml-in_mr_mr-in_nl_nl-nl_or_or-in_pa_pa-in_pt-pt_sa_sa-in_ta_ta-in_te_te-in_tzm_tzm-latn_tzm-latn-dz_'], ["M.D.Y", '_sah_sah-ru_'], ["M/D/Y", '_en_en-029_en-ph_en-us_en-zw_es-pa_es-us_fa_fa-ir_fil_fil-ph_moh_moh-ca_ne_ne-np_rw_rw-rw_sw_sw-ke_'], ["Y.M.D", '_lt_lt-lt_mn_mn-cyrl_mn-mn_'], ["Y.M.D.", '_hu_hu-hu_lv_lv-lv_'], ["Y/M/D", '_af_af-za_bo_bo-cn_en-za_eu_eu-es_ii_ii-cn_ja_ja-jp_mn-mong_mn-mong-cn_nso_nso-za_tn_tn-za_xh_xh-za_zh_zh-chs_zh-cn_zh-hans_zh-tw_zu_zu-za_'], ["Y-M-D", '_fr-ca_km_km-kh_ko_ko-kr_pl_pl-pl_se-se_si_si-lk_sma_sma-se_smj_smj-se_sq_sq-al_sv_sv-se_ug_ug-cn_']];
	  var localeCpy = localeNames.map(function (l) {
	    return l.toLowerCase();
	  });

	  var _loop = function _loop(i) {
	    var srchStr = '_' + localeCpy[i] + '_';
	    var found = locales.find(function (l) {
	      return l[1].includes(srchStr);
	    });

	    if (found) {
	      return {
	        v: {
	          locale: localeCpy[i],
	          format: found[0],
	          parseLocale: parseFromFormat(found[0])
	        }
	      };
	    }

	    var decrSpec = decreaseLocaleSpecificity(localeCpy[i]);

	    if (decrSpec) {
	      localeCpy.push(decrSpec);
	    }
	  };

	  for (var i = 0; i < localeCpy.length; ++i) {
	    var _ret = _loop(i);

	    if (_typeof(_ret) === "object") return _ret.v;
	  }

	  var format = "Y-M-D";
	  return {
	    locale: "en",
	    format: format,
	    parseLocale: parseFromFormat(format)
	  };
	}

	function decreaseLocaleSpecificity(localeName) {
	  var returnVar = localeName.replace(/-[a-z0-9]+$/, '');

	  if (!returnVar || returnVar === localeName) {
	    return null;
	  }

	  return returnVar;
	}

	function parseFromFormat(format) {
	  var yPos = format.indexOf('Y');
	  var mPos = format.indexOf('M');
	  var dPos; // only 3 permutaions in use: DMY, YMD & MDY

	  if (yPos < mPos) {
	    yPos = 1;
	    mPos = 2;
	    dPos = 3;
	  } else {
	    yPos = 3;
	    dPos = format.indexOf('D');

	    if (dPos < mPos) {
	      dPos = 1;
	      mPos = 2;
	    } else {
	      mPos = 1;
	      dPos = 2;
	    }
	  }

	  format = format.replace(/\./g, '\\.').replace('Y', '([12]\\d{3})').replace('M', '([01]?\\d)').replace('D', '([0-3]?\\d)');
	  var localeDtRx = new RegExp(format);
	  return function (dtStr) {
	    var dateMatch = localeDtRx.exec(dtStr);

	    if (!dateMatch) {
	      return null;
	    }

	    var yr = parseInt(dateMatch[yPos], 10);
	    var mth = parseInt(dateMatch[mPos], 10) - 1;
	    var dt = parseInt(dateMatch[dPos], 10);
	    var returnVar = new Date(yr, mth, dt);

	    if (returnVar.getFullYear() !== yr || returnVar.getMonth() !== mth || returnVar.getDate() !== dt) {
	      return null;
	    }

	    return returnVar;
	  };
	}

	function getLanguageInfo(localeNames) {
	  var languages = getLanguages();
	  var fmt = getLocaleFormat(localeNames);
	  var language;
	  var l = fmt.locale;

	  while (!(language = languages[l])) {
	    l = decreaseLocaleSpecificity(l);
	  }

	  if (!language) {
	    language = languages['en']; // shouldn't get to here - possibly throw an error?
	  }

	  return Object.assign(fmt, language);
	}

	function getLanguages() {
	  return {
	    ar: {
	      // Arabic
	      today: "Ø§ÙÙÙÙ",
	      days: ["Ø§ÙØ£Ø­Ø¯", "Ø§ÙØ¥Ø«ÙÙÙ", "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡", "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡", "Ø§ÙØ®ÙÙØ³", "Ø§ÙØ¬ÙØ¹Ø©", "Ø§ÙØ³Ø¨Øª"],
	      months: ["ÙØ­Ø±Ù", "ØµÙØ±", "Ø±Ø¨ÙØ¹Â Ø§ÙØ£ÙÙ", "Ø±Ø¨ÙØ¹Â Ø§ÙØ«Ø§ÙÙ", "Ø¬ÙØ§Ø¯ÙÂ Ø§ÙØ£ÙÙÙ", "Ø¬ÙØ§Ø¯ÙÂ Ø§ÙØ«Ø§ÙÙØ©", "Ø±Ø¬Ø¨", "Ø´Ø¹Ø¨Ø§Ù", "Ø±ÙØ¶Ø§Ù", "Ø´ÙØ§Ù", "Ø°ÙÂ Ø§ÙÙØ¹Ø¯Ø©", "Ø°ÙÂ Ø§ÙØ­Ø¬Ø©"]
	    },
	    bg: {
	      // Bulgarian
	      today: "Ð´Ð½ÐµÑ",
	      days: ["Ð½ÐµÐ´", "Ð¿Ð¾Ð½", "Ð²Ñ", "ÑÑ", "ÑÐµÑÐ²", "Ð¿ÐµÑ", "ÑÑÐ±"],
	      months: ["ÑÐ½ÑÐ°ÑÐ¸", "ÑÐµÐ²ÑÑÐ°ÑÐ¸", "Ð¼Ð°ÑÑ", "Ð°Ð¿ÑÐ¸Ð»", "Ð¼Ð°Ð¹", "ÑÐ½Ð¸", "ÑÐ»Ð¸", "Ð°Ð²Ð³ÑÑÑ", "ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸", "Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸", "Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸", "Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸"]
	    },
	    ca: {
	      // Catalan
	      today: "avui",
	      days: ["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."],
	      months: ["gener", "febrer", "marÃ§", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre"]
	    },
	    cs: {
	      // Czech
	      today: "dnes",
	      days: ["ne", "po", "Ãºt", "st", "Ät", "pÃ¡", "so"],
	      months: ["leden", "Ãºnor", "bÅezen", "duben", "kvÄten", "Äerven", "Äervenec", "srpen", "zÃ¡ÅÃ­", "ÅÃ­jen", "listopad", "prosinec"]
	    },
	    da: {
	      // Danish
	      today: "i dag",
	      days: ["sÃ¸", "ma", "ti", "on", "to", "fr", "lÃ¸"],
	      months: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"]
	    },
	    de: {
	      // German
	      today: "heute",
	      days: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
	      months: ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]
	    },
	    el: {
	      // Greek
	      today: "ÏÎ®Î¼ÎµÏÎ±",
	      days: ["ÎÏÏ", "ÎÎµÏ", "Î¤ÏÎ¹", "Î¤ÎµÏ", "Î ÎµÎ¼", "Î Î±Ï", "Î£Î±Î²"],
	      months: ["ÎÎ±Î½Î¿ÏÎ¬ÏÎ¹Î¿Ï", "Î¦ÎµÎ²ÏÎ¿ÏÎ¬ÏÎ¹Î¿Ï", "ÎÎ¬ÏÏÎ¹Î¿Ï", "ÎÏÏÎ¯Î»Î¹Î¿Ï", "ÎÎ¬Î¹Î¿Ï", "ÎÎ¿ÏÎ½Î¹Î¿Ï", "ÎÎ¿ÏÎ»Î¹Î¿Ï", "ÎÏÎ³Î¿ÏÏÏÎ¿Ï", "Î£ÎµÏÏÎ­Î¼Î²ÏÎ¹Î¿Ï", "ÎÎºÏÏÎ²ÏÎ¹Î¿Ï", "ÎÎ¿Î­Î¼Î²ÏÎ¹Î¿Ï", "ÎÎµÎºÎ­Î¼Î²ÏÎ¹Î¿Ï"]
	    },
	    en: {
	      // English
	      today: "today",
	      days: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
	    },
	    es: {
	      // Spanish
	      today: "hoy",
	      days: ["dom", "lun", "mar", "miÃ©", "jue", "vie", "sÃ¡b"],
	      months: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
	    },
	    fi: {
	      // Finnish
	      today: "tÃ¤nÃ¤Ã¤n",
	      days: ["su", "ma", "ti", "ke", "to", "pe", "la"],
	      months: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesÃ¤kuu", "heinÃ¤kuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu"]
	    },
	    fr: {
	      // French
	      today: "aujourd'hui",
	      days: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
	      months: ["janvier", "fÃ©vrier", "mars", "avril", "mai", "juin", "juillet", "aoÃ»t", "septembre", "octobre", "novembre", "dÃ©cembre"]
	    },
	    he: {
	      // Hebrew
	      today: "××××",
	      days: ["×××Â ×", "×××Â ×", "×××Â ×", "×××Â ×", "×××Â ×", "×××Â ×", "×©××ª"],
	      months: ["×× ×××¨", "×¤××¨×××¨", "××¨×¥", "××¤×¨××", "×××", "××× ×", "××××", "×××××¡×", "×¡×¤××××¨", "×××§××××¨", "× ×××××¨", "××¦×××¨"]
	    },
	    hu: {
	      // Hungarian
	      today: "Ma",
	      days: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
	      months: ["januÃ¡r", "februÃ¡r", "mÃ¡rcius", "Ã¡prilis", "mÃ¡jus", "jÃºnius", "jÃºlius", "augusztus", "szeptember", "oktÃ³ber", "november", "december"]
	    },
	    is: {
	      // Icelandic
	      today: "Ã dag",
	      days: ["sun.", "mÃ¡n.", "Ã¾ri.", "miÃ°.", "fim.", "fÃ¶s.", "lau."],
	      months: ["janÃºar", "febrÃºar", "mars", "aprÃ­l", "maÃ­", "jÃºnÃ­", "jÃºlÃ­", "Ã¡gÃºst", "september", "oktÃ³ber", "nÃ³vember", "desember"]
	    },
	    it: {
	      // Italian
	      today: "oggi",
	      days: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
	      months: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre"]
	    },
	    ja: {
	      // Japanese
	      today: "ä»æ¥",
	      days: ["æ¥", "æ", "ç«", "æ°´", "æ¨", "é", "å"],
	      months: ["1æ", "2æ", "3æ", "4æ", "5æ", "6æ", "7æ", "8æ", "9æ", "10æ", "11æ", "12æ"]
	    },
	    ko: {
	      // Korean
	      today: "ì¤ë",
	      days: ["ì¼", "ì", "í", "ì", "ëª©", "ê¸", "í "],
	      months: ["1ì", "2ì", "3ì", "4ì", "5ì", "6ì", "7ì", "8ì", "9ì", "10ì", "11ì", "12ì"]
	    },
	    nl: {
	      // Dutch
	      today: "vandaag",
	      days: ["zo", "ma", "di", "wo", "do", "vr", "za"],
	      months: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"]
	    },
	    no: {
	      // Norwegian
	      today: "i dag",
	      days: ["sÃ¸", "ma", "ti", "on", "to", "fr", "lÃ¸"],
	      months: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
	    },
	    pl: {
	      // Polish
	      today: "dzisiaj",
	      days: ["N", "Pn", "Wt", "År", "Cz", "Pt", "So"],
	      months: ["styczeÅ", "luty", "marzec", "kwiecieÅ", "maj", "czerwiec", "lipiec", "sierpieÅ", "wrzesieÅ", "paÅºdziernik", "listopad", "grudzieÅ"]
	    },
	    pt: {
	      // Portuguese
	      today: "hoje",
	      days: ["dom", "seg", "ter", "qua", "qui", "sex", "sÃ¡b"],
	      months: ["janeiro", "fevereiro", "marÃ§o", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]
	    },
	    rm: {
	      // Romansh
	      today: "oz",
	      days: ["du", "gli", "ma", "me", "gie", "ve", "so"],
	      months: ["schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december"]
	    },
	    ro: {
	      // Romanian
	      today: "astÄzi",
	      days: ["D", "L", "Ma", "Mi", "J", "V", "S"],
	      months: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie"]
	    },
	    ru: {
	      // Russian
	      today: "CÐµÐ³Ð¾Ð´Ð½Ñ",
	      days: ["ÐÑ", "ÐÐ½", "ÐÑ", "Ð¡Ñ", "Ð§Ñ", "ÐÑ", "Ð¡Ð±"],
	      months: ["Ð¯Ð½Ð²Ð°ÑÑ", "Ð¤ÐµÐ²ÑÐ°Ð»Ñ", "ÐÐ°ÑÑ", "ÐÐ¿ÑÐµÐ»Ñ", "ÐÐ°Ð¹", "ÐÑÐ½Ñ", "ÐÑÐ»Ñ", "ÐÐ²Ð³ÑÑÑ", "Ð¡ÐµÐ½ÑÑÐ±ÑÑ", "ÐÐºÑÑÐ±ÑÑ", "ÐÐ¾ÑÐ±ÑÑ", "ÐÐµÐºÐ°Ð±ÑÑ"]
	    },
	    hr: {
	      // Croatian
	      today: "danas",
	      days: ["ned", "pon", "uto", "sri", "Äet", "pet", "sub"],
	      months: ["sijeÄanj", "veljaÄa", "oÅ¾ujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac"]
	    },
	    sk: {
	      // Slovak
	      today: "dnes",
	      days: ["ne", "po", "ut", "st", "Å¡t", "pi", "so"],
	      months: ["januÃ¡r", "februÃ¡r", "marec", "aprÃ­l", "mÃ¡j", "jÃºn", "jÃºl", "august", "september", "oktÃ³ber", "november", "december"]
	    },
	    sq: {
	      // Albanian
	      today: "sot",
	      days: ["Die", "HÃ«n", "Mar", "MÃ«r", "Enj", "Pre", "Sht"],
	      months: ["janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nÃ«ntor", "dhjetor"]
	    },
	    sv: {
	      // Swedish
	      today: "i dag",
	      days: ["sÃ¶", "mÃ¥", "ti", "on", "to", "fr", "lÃ¶"],
	      months: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december"]
	    },
	    th: {
	      // Thai
	      today: "à¹à¸à¸§à¸±à¸à¸à¸µà¹",
	      days: ["à¸­à¸².", "à¸.", "à¸­.", "à¸.", "à¸à¸¤.", "à¸¨.", "à¸ª."],
	      months: ["à¸¡à¸à¸£à¸²à¸à¸¡", "à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹", "à¸¡à¸µà¸à¸²à¸à¸¡", "à¹à¸¡à¸©à¸²à¸¢à¸", "à¸à¸¤à¸©à¸ à¸²à¸à¸¡", "à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸", "à¸à¸£à¸à¸à¸²à¸à¸¡", "à¸ªà¸´à¸à¸«à¸²à¸à¸¡", "à¸à¸±à¸à¸¢à¸²à¸¢à¸", "à¸à¸¸à¸¥à¸²à¸à¸¡", "à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸", "à¸à¸±à¸à¸§à¸²à¸à¸¡"]
	    },
	    tr: {
	      // Turkish
	      today: "bugÃ¼n",
	      days: ["Paz", "Pzt", "Sal", "Ãar", "Per", "Cum", "Cmt"],
	      months: ["Ocak", "Åubat", "Mart", "Nisan", "MayÄ±s", "Haziran", "Temmuz", "AÄustos", "EylÃ¼l", "Ekim", "KasÄ±m", "AralÄ±k"]
	    },
	    ur: {
	      // Urdu
	      today: "Ø¢Ø¬",
	      days: ["Ø§ØªÙØ§Ø±", "Ù¾ÙØ±", "ÙÙÚ¯Ù", "Ø¨Ø¯Ú¾", "Ø¬ÙØ¹Ø±Ø§Øª", "Ø¬ÙØ¹Ù", "ÙÙØªÙ"],
	      months: ["Ø¬ÙÙØ±Û", "ÙØ±ÙØ±Û", "ÙØ§Ø±Ú", "Ø§Ù¾Ø±ÛÙ", "ÙØ¦Û", "Ø¬ÙÙ", "Ø¬ÙÙØ§Ø¦Û", "Ø§Ú¯Ø³Øª", "Ø³ØªÙØ¨Ø±", "Ø§Ú©ØªÙØ¨Ø±", "ÙÙÙØ¨Ø±", "Ø¯Ø³ÙØ¨Ø±"]
	    },
	    id: {
	      // Indonesian
	      today: "hari ini",
	      days: ["Minggu", "Sen", "Sel", "Rabu", "Kamis", "Jumat", "Sabtu"],
	      months: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember"]
	    },
	    uk: {
	      // Ukrainian
	      today: "ÑÑÐ¾Ð³Ð¾Ð´Ð½Ñ",
	      days: ["ÐÐ´", "ÐÐ½", "ÐÑ", "Ð¡Ñ", "Ð§Ñ", "ÐÑ", "Ð¡Ð±"],
	      months: ["Ð¡ÑÑÐµÐ½Ñ", "ÐÑÑÐ¸Ð¹", "ÐÐµÑÐµÐ·ÐµÐ½Ñ", "ÐÐ²ÑÑÐµÐ½Ñ", "Ð¢ÑÐ°Ð²ÐµÐ½Ñ", "Ð§ÐµÑÐ²ÐµÐ½Ñ", "ÐÐ¸Ð¿ÐµÐ½Ñ", "Ð¡ÐµÑÐ¿ÐµÐ½Ñ", "ÐÐµÑÐµÑÐµÐ½Ñ", "ÐÐ¾Ð²ÑÐµÐ½Ñ", "ÐÐ¸ÑÑÐ¾Ð¿Ð°Ð´", "ÐÑÑÐ´ÐµÐ½Ñ"]
	    },
	    be: {
	      // Belarusian
	      today: "ÑÑÐ½Ð½Ñ",
	      days: ["Ð½Ð´", "Ð¿Ð½", "Ð°Ñ", "ÑÑ", "ÑÑ", "Ð¿Ñ", "ÑÐ±"],
	      months: ["Ð¡ÑÑÐ´Ð·ÐµÐ½Ñ", "ÐÑÑÑ", "Ð¡Ð°ÐºÐ°Ð²ÑÐº", "ÐÑÐ°ÑÐ°Ð²ÑÐº", "ÐÐ°Ð¹", "Ð§ÑÑÐ²ÐµÐ½Ñ", "ÐÑÐ¿ÐµÐ½Ñ", "ÐÐ½ÑÐ²ÐµÐ½Ñ", "ÐÐµÑÐ°ÑÐµÐ½Ñ", "ÐÐ°ÑÑÑÑÑÐ½ÑÐº", "ÐÑÑÑÐ°Ð¿Ð°Ð´", "Ð¡Ð½ÐµÐ¶Ð°Ð½Ñ"]
	    },
	    sl: {
	      // Slovenian
	      today: "danes",
	      days: ["ned", "pon", "tor", "sre", "Äet", "pet", "sob"],
	      months: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december"]
	    },
	    et: {
	      // Estonian
	      today: "tÃ¤na",
	      days: ["P", "E", "T", "K", "N", "R", "L"],
	      months: ["jaanuar", "veebruar", "mÃ¤rts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember"]
	    },
	    lv: {
	      // Latvian
	      today: "Å¡odien",
	      days: ["sv", "pr", "ot", "tr", "ce", "pk", "se"],
	      months: ["janvÄris", "februÄris", "marts", "aprÄ«lis", "maijs", "jÅ«nijs", "jÅ«lijs", "augusts", "septembris", "oktobris", "novembris", "decembris"]
	    },
	    lt: {
	      // Lithuanian
	      today: "Å¡iandien",
	      days: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Å t"],
	      months: ["sausis", "vasaris", "kovas", "balandis", "geguÅ¾Ä", "birÅ¾elis", "liepa", "rugpjÅ«tis", "rugsÄjis", "spalis", "lapkritis", "gruodis"]
	    },
	    tg: {
	      // Tajik
	      today: "Ð¸Ð¼ÑÓ¯Ð·",
	      days: ["Ð¯Ñ", "ÐÑ", "Ð¡Ñ", "Ð§Ñ", "ÐÑ", "Ò¶Ð¼", "Ð¨Ð½"],
	      months: ["Ð¯Ð½Ð²Ð°Ñ", "Ð¤ÐµÐ²ÑÐ°Ð»", "ÐÐ°ÑÑ", "ÐÐ¿ÑÐµÐ»", "ÐÐ°Ð¹", "ÐÑÐ½", "ÐÑÐ»", "ÐÐ²Ð³ÑÑÑ", "Ð¡ÐµÐ½ÑÑÐ±Ñ", "ÐÐºÑÑÐ±Ñ", "ÐÐ¾ÑÐ±Ñ", "ÐÐµÐºÐ°Ð±Ñ"]
	    },
	    fa: {
	      // Persian
	      today: "Ø§ÙØ±ÙØ²",
	      days: ["Ø§ÙØ£Ø­Ø¯", "Ø§ÙØ¥Ø«ÙÙÙ", "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡", "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡", "Ø§ÙØ®ÙÙØ³", "Ø§ÙØ¬ÙØ¹Ø©", "Ø§ÙØ³Ø¨Øª"],
	      months: ["Ø¬Ø§ÙÙÙÙÙ", "ÙÙÙØ±ÙÙÙ", "ÙØ§Ø±Ø³", "Ø£ÙØ±ÙÙ", "ÙÙ", "Ø¬ÙØ§Ù", "Ø¬ÙÙÙÙ", "Ø£ÙØª", "Ø³Ø¨ØªÙØ¨Ø±", "Ø§ÙØªÙØ¨Ø±", "ÙÙÙÙØ¨Ø±", "Ø¯ÙØ³ÙØ¨Ø±"]
	    },
	    vi: {
	      // Vietnamese
	      today: "hÃ´m nay",
	      days: ["CN", "Hai", "Ba", "TÆ°", "NÄm", "SaÌu", "BaÌy"],
	      months: ["ThaÌng GiÃªng", "ThaÌng Hai", "ThaÌng Ba", "ThaÌng TÆ°", "ThaÌng NÄm", "ThaÌng SaÌu", "ThaÌng BaÌy", "ThaÌng TaÌm", "ThaÌng ChiÌn", "ThaÌng MÆ°Æ¡Ìi", "ThaÌng MÆ°Æ¡Ìi MÃ´Ì£t", "ThaÌng MÆ°Æ¡Ìi Hai"]
	    },
	    hy: {
	      // Armenian
	      today: "Õ¡ÕµÕ½ÖÖ",
	      days: ["Ô¿Õ«Ö", "ÔµÖÕ¯", "ÔµÖÖ", "ÕÖÖ", "ÕÕ¶Õ£", "ÕÕÖ", "ÕÕ¢Õ©"],
	      months: ["ÕÕ¸ÖÕ¶Õ¾Õ¡Ö", "ÕÕ¥Õ¿ÖÕ¾Õ¡Ö", "ÕÕ¡ÖÕ¿", "Ô±ÕºÖÕ«Õ¬", "ÕÕ¡ÕµÕ«Õ½", "ÕÕ¸ÖÕ¶Õ«Õ½", "ÕÕ¸ÖÕ¬Õ«Õ½", "ÕÕ£Õ¸Õ½Õ¿Õ¸Õ½", "ÕÕ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö", "ÕÕ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö", "ÕÕ¸ÕµÕ¥Õ´Õ¢Õ¥Ö", "Ô´Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö"]
	    },
	    az: {
	      // Azeri
	      today: "bugÃ¼n",
	      days: ["B", "Be", "Ãa", "Ã", "Ca", "C", "Å"],
	      months: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "Ä°yun", "Ä°yul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr"]
	    },
	    eu: {
	      // Basque
	      today: "gaur",
	      days: ["ig.", "al.", "as.", "az.", "og.", "or.", "lr."],
	      months: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua"]
	    },
	    hsb: {
	      // Upper Sorbian
	      today: "dÅºensa",
	      days: ["nje", "pÃ³n", "wut", "srj", "Å¡tw", "pja", "sob"],
	      months: ["januar", "februar", "mÄrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december"]
	    },
	    mk: {
	      // Macedonian (FYROM)
	      today: "Ð´ÐµÐ½ÐµÑ",
	      days: ["Ð½ÐµÐ´", "Ð¿Ð¾Ð½", "Ð²ÑÑ", "ÑÑÐ´", "ÑÐµÑ", "Ð¿ÐµÑ", "ÑÐ°Ð±"],
	      months: ["ÑÐ°Ð½ÑÐ°ÑÐ¸", "ÑÐµÐ²ÑÑÐ°ÑÐ¸", "Ð¼Ð°ÑÑ", "Ð°Ð¿ÑÐ¸Ð»", "Ð¼Ð°Ñ", "ÑÑÐ½Ð¸", "ÑÑÐ»Ð¸", "Ð°Ð²Ð³ÑÑÑ", "ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸", "Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸", "Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸", "Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸"]
	    },
	    tn: {
	      // Setswana
	      today: "Gompieno",
	      days: ["Ltp.", "Mos.", "Lbd.", "Lbr.", "Lbn.", "Lbt.", "Lmt."],
	      months: ["Ferikgong", "Tlhakole", "Mopitloe", "Moranang", "Motsheganong", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimothole"]
	    },
	    xh: {
	      // isiXhosa
	      today: "namhlanje",
	      days: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	      months: ["Mqungu", "Mdumba", "Kwindla", "Tshazimpuzi", "Canzibe", "Silimela", "Khala", "Thupha", "Msintsi", "Dwarha", "Nkanga", "Mnga"]
	    },
	    zu: {
	      // isiZulu
	      today: "namhlanje",
	      days: ["Son.", "Mso.", "Bi.", "Tha.", "Ne.", "Hla.", "Mgq."],
	      months: ["uMasingana", "uNhlolanja", "uNdasa", "uMbaso", "uNhlaba", "uNhlangulana", "uNtulikazi", "uNcwaba", "uMandulo", "uMfumfu", "uLwezi", "uZibandlela"]
	    },
	    af: {
	      // Afrikaans
	      today: "vandag",
	      days: ["Son", "Maan", "Dins", "Woen", "Dond", "Vry", "Sat"],
	      months: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember"]
	    },
	    ka: {
	      // Georgian
	      today: "áá¦áá¡",
	      days: ["áááá á", "áá á¨ááááá", "á¡ááá¨ááááá", "ááá®á¨ááááá", "á®á£áá¨ááááá", "ááá áá¡áááá", "á¨ááááá"],
	      months: ["áááááá á", "ááááá áááá", "ááá á¢á", "ááá ááá", "áááá¡á", "ááááá¡á", "ááááá¡á", "ááááá¡á¢á", "á¡áá¥á¢ááááá á", "áá¥á¢ááááá á", "ááááááá á", "áááááááá á"]
	    },
	    fo: {
	      // Faroese
	      today: "Ã­ dag",
	      days: ["sun", "mÃ¡n", "tÃ½s", "mik", "hÃ³s", "frÃ­", "leyg"],
	      months: ["januar", "februar", "mars", "aprÃ­l", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
	    },
	    hi: {
	      // Hindi
	      today: "à¤à¤",
	      days: ["à¤°à¤µà¤¿.", "à¤¸à¥à¤®.", "à¤®à¤à¤à¤².", "à¤¬à¥à¤§.", "à¤à¥à¤°à¥.", "à¤¶à¥à¤à¥à¤°.", "à¤¶à¤¨à¤¿."],
	      months: ["à¤à¤¨à¤µà¤°à¥", "à¤«à¤°à¤µà¤°à¥", "à¤®à¤¾à¤°à¥à¤", "à¤à¤ªà¥à¤°à¥à¤²", "à¤®à¤", "à¤à¥à¤¨", "à¤à¥à¤²à¤¾à¤", "à¤à¤à¤¸à¥à¤¤", "à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°", "à¤à¤à¥à¤¤à¥à¤¬à¤°", "à¤¨à¤µà¤®à¥à¤¬à¤°", "à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°"]
	    },
	    mt: {
	      // Maltese
	      today: "illum",
	      days: ["Ä¦ad", "Tne", "Tli", "Erb", "Ä¦am", "Ä im", "Sib"],
	      months: ["Jannar", "Frar", "Marzu", "April", "Mejju", "Ä unju", "Lulju", "Awissu", "Settembru", "Ottubru", "Novembru", "DiÄembru"]
	    },
	    se: {
	      // Sami (Northern)
	      today: "odne",
	      days: ["sotn", "vuos", "maÅ", "gask", "duor", "bear", "lÃ¡v"],
	      months: ["oÄÄajagemÃ¡nnu", "guovvamÃ¡nnu", "njukÄamÃ¡nnu", "cuoÅomÃ¡nnu", "miessemÃ¡nnu", "geassemÃ¡nnu", "suoidnemÃ¡nnu", "borgemÃ¡nnu", "ÄakÄamÃ¡nnu", "golggotmÃ¡nnu", "skÃ¡bmamÃ¡nnu", "juovlamÃ¡nnu"]
	    },
	    ga: {
	      // Irish
	      today: "inniu",
	      days: ["Domh", "Luan", "MÃ¡ir", "CÃ©ad", "DÃ©ar", "Aoi", "Sath"],
	      months: ["EanÃ¡ir", "Feabhra", "MÃ¡rta", "AibreÃ¡n", "Bealtaine", "Meitheamh", "IÃºil", "LÃºnasa", "MeÃ¡n FÃ³mhair", "Deireadh FÃ³mhair", "Samhain", "Nollaig"]
	    },
	    ms: {
	      // Malay
	      today: "hari ini",
	      days: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
	      months: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"]
	    },
	    kk: {
	      // Kazakh
	      today: "Ð±Ò¯Ð³ÑÐ½",
	      days: ["ÐÐº", "ÐÑ", "Ð¡Ñ", "Ð¡Ñ", "ÐÑ", "ÐÐ¼", "Ð¡Ð½"],
	      months: ["ÒÐ°Ò£ÑÐ°Ñ", "Ð°ÒÐ¿Ð°Ð½", "Ð½Ð°ÑÑÑÐ·", "ÑÓÑÑÑ", "Ð¼Ð°Ð¼ÑÑ", "Ð¼Ð°ÑÑÑÐ¼", "ÑÑÐ»Ð´Ðµ", "ÑÐ°Ð¼ÑÐ·", "ÒÑÑÐºÒ¯Ð¹ÐµÐº", "ÒÐ°Ð·Ð°Ð½", "ÒÐ°ÑÐ°ÑÐ°", "Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½"]
	    },
	    ky: {
	      // Kyrgyz
	      today: "Ð±Ò¯Ð³Ò¯Ð½",
	      days: ["ÐÑ", "ÐÑ", "Ð¨Ñ", "Ð¨Ñ", "ÐÑ", "ÐÐ¼", "ÐÑ"],
	      months: ["Ð¯Ð½Ð²Ð°ÑÑ", "Ð¤ÐµÐ²ÑÐ°Ð»Ñ", "ÐÐ°ÑÑ", "ÐÐ¿ÑÐµÐ»Ñ", "ÐÐ°Ð¹", "ÐÑÐ½Ñ", "ÐÑÐ»Ñ", "ÐÐ²Ð³ÑÑÑ", "Ð¡ÐµÐ½ÑÑÐ±ÑÑ", "ÐÐºÑÑÐ±ÑÑ", "ÐÐ¾ÑÐ±ÑÑ", "ÐÐµÐºÐ°Ð±ÑÑ"]
	    },
	    sw: {
	      // Kiswahili
	      today: "leo",
	      days: ["Jumap.", "Jumat.", "Juman.", "Jumat.", "Alh.", "Iju.", "Jumam."],
	      months: ["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Decemba"]
	    },
	    tk: {
	      // Turkmen
	      today: "bugÃ¼n",
	      days: ["Db", "Sb", "Ãb", "Pb", "An", "Åb", "Ãb"],
	      months: ["Ãanwar", "Fewral", "Mart", "Aprel", "MaÃ½", "lÃ½un", "lÃ½ul", "Awgust", "SentÃ½abr", "OktÃ½abr", "NoÃ½abr", "Dekabr"]
	    },
	    uz: {
	      // Uzbek
	      today: "Bugun",
	      days: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
	      months: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr"]
	    },
	    tt: {
	      // Tatar
	      today: "Ð±Ò¯Ð³ÐµÐ½",
	      days: ["Ð¯ÐºÑ", "ÐÒ¯Ñ", "Ð¡Ð¸Ñ", "Ð§ÓÑÑ", "ÐÓÐ½Ò", "ÒÐ¾Ð¼", "Ð¨Ð¸Ð¼"],
	      months: ["ÐÑÐ¹Ð½Ð²Ð°Ñ", "Ð¤ÐµÐ²ÑÐ°Ð»Ñ", "ÐÐ°ÑÑ", "ÐÐ¿ÑÐµÐ»Ñ", "ÐÐ°Ð¹", "ÐÑÐ½Ñ", "ÐÑÐ»Ñ", "ÐÐ²Ð³ÑÑÑ", "Ð¡ÐµÐ½ÑÑÐ±ÑÑ", "ÐÐºÑÑÐ±ÑÑ", "ÐÐ¾ÑÐ±ÑÑ", "ÐÐµÐºÐ°Ð±ÑÑ"]
	    },
	    bn: {
	      // Bengali
	      today: "à¦à¦",
	      days: ["à¦°à¦¬à¦¿.", "à¦¸à§à¦®.", "à¦®à¦à§à¦à¦².", "à¦¬à§à¦§.", "à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿.", "à¦¶à§à¦à§à¦°.", "à¦¶à¦¨à¦¿."],
	      months: ["à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§", "à¦«à§à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§", "à¦®à¦¾à¦°à§à¦", "à¦à¦ªà§à¦°à¦¿à¦²", "à¦®à§", "à¦à§à¦¨", "à¦à§à¦²à¦¾à¦", "à¦à¦à¦¸à§à¦", "à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°", "à¦à¦à§à¦à§à¦¬à¦°", "à¦¨à¦­à§à¦®à§à¦¬à¦°", "à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°"]
	    },
	    pa: {
	      // Punjabi
	      today: "à¨à©±à¨",
	      days: ["à¨à¨¤.", "à¨¸à©à¨®.", "à¨®à©°à¨à¨².", "à¨¬à©à©±à¨§.", "à¨µà©à¨°.", "à¨¶à©à¨à¨°.", "à¨¶à¨¨à¨¿à©±à¨à¨°."],
	      months: ["à¨à¨¨à¨µà¨°à©", "à©à¨°à¨µà¨°à©", "à¨®à¨¾à¨°à¨", "à¨à¨ªà©à¨°à©à¨²", "à¨®à¨", "à¨à©à¨¨", "à¨à©à¨²à¨¾à¨", "à¨à¨à¨¸à¨¤", "à¨¸à¨¤à©°à¨¬à¨°", "à¨à¨à¨¤à©à¨¬à¨°", "à¨¨à¨µà©°à¨¬à¨°", "à¨¦à¨¸à©°à¨¬à¨°"]
	    },
	    gu: {
	      // Gujarati
	      today: "àªàªà«",
	      days: ["àª°àªµàª¿", "àª¸à«àª®", "àª®àªàªàª³", "àª¬à«àª§", "àªà«àª°à«", "àª¶à«àªà«àª°", "àª¶àª¨àª¿"],
	      months: ["àªàª¾àª¨à«àª¯à«àªàª°à«", "àª«à«àª¬à«àª°à«àªàª°à«", "àª®àª¾àª°à«àª", "àªàªªà«àª°àª¿àª²", "àª®à«", "àªà«àª¨", "àªà«àª²àª¾àª", "àªàªàª¸à«àª", "àª¸àªªà«àªà«àª®à«àª¬àª°", "àªàªà«àªà«àª¬àª°", "àª¨àªµà«àª®à«àª¬àª°", "àª¡àª¿àª¸à«àª®à«àª¬àª°"]
	    },
	    or: {
	      // Oriya
	      today: "à¬à¬à¬¿",
	      days: ["à¬°à¬¬à¬¿.", "à¬¸à­à¬¾à¬®.", "à¬®à¬à­à¬à¬³.", "à¬¬à­à¬§.", "à¬à­à¬°à­.", "à¬¶à­à¬à­à¬°.", "à¬¶à¬¨à¬¿."],
	      months: ["à¬à¬¾à¬¨à­à­à¬¾à¬°à­", "à¬«à­à¬°à­à¬¬à­à­à¬¾à¬°à­", "à¬®à¬¾à¬°à­à¬à­à¬", "à¬à¬ªà­à¬°à¬¿à¬²à­â", "à¬®à­", "à¬à­à¬¨à­â", "à¬à­à¬²à¬¾à¬", "à¬à¬à¬·à­à¬", "à¬¸à­à¬ªà­à¬à­à¬®à­à¬¬à¬°", "à¬à¬à­à¬à­à¬¬à¬°", "à¬¨à¬­à­à¬®à­à¬¬à¬°", "(à¬¡à¬¿à¬¸à­à¬®à­à¬¬à¬°"]
	    },
	    ta: {
	      // Tamil
	      today: "à®à®©à¯à®±à¯",
	      days: ["à®à®¾à®¯à®¿à®±à¯", "à®¤à®¿à®à¯à®à®³à¯", "à®à¯à®µà¯à®µà®¾à®¯à¯", "à®ªà¯à®¤à®©à¯", "à®µà®¿à®¯à®¾à®´à®©à¯", "à®µà¯à®³à¯à®³à®¿", "à®à®©à®¿"],
	      months: ["à®à®©à®µà®°à®¿", "à®ªà®¿à®ªà¯à®°à®µà®°à®¿", "à®®à®¾à®°à¯à®à¯", "à®à®ªà¯à®°à®²à¯", "à®®à¯", "à®à¯à®©à¯", "à®à¯à®²à¯", "à®à®à®¸à¯à®à¯", "à®à¯à®ªà¯à®à®®à¯à®ªà®°à¯", "à®à®à¯à®à¯à®ªà®°à¯", "à®¨à®µà®®à¯à®ªà®°à¯", "à®à®¿à®à®®à¯à®ªà®°à¯"]
	    },
	    te: {
	      // Telugu
	      today: "à°¨à±à°¡à±",
	      days: ["à°à°¦à°¿.", "à°¸à±à°®.", "à°®à°à°à°³.", "à°¬à±à°§.", "à°à±à°°à±.", "à°¶à±à°à±à°°.", "à°¶à°¨à°¿."],
	      months: ["à°à°¨à°µà°°à°¿", "à°«à°¿à°¬à±à°°à°µà°°à°¿", "à°®à°¾à°°à±à°à°¿", "à°à°ªà±à°°à°¿à°²à±", "à°®à±", "à°à±à°¨à±", "à°à±à°²à±", "à°à°à°¸à±à°à±", "à°¸à±à°ªà±à°à±à°à°¬à°°à±", "à°à°à±à°à±à°¬à°°à±", "à°¨à°µà°à°¬à°°à±", "à°¡à°¿à°¸à±à°à°¬à°°à±"]
	    },
	    kn: {
	      // Kannada
	      today: "à²à²à²¦à³",
	      days: ["à²­à²¾à²¨à³.", "à²¸à³à²®.", "à²®à²à²à²³.", "à²¬à³à²§.", "à²à³à²°à³.", "à²¶à³à²à³à²°.", "à²¶à²¨à²¿."],
	      months: ["à²à²¨à²µà²°à²¿", "à²«à³à²¬à³à²°à²µà²°à²¿", "à²®à²¾à²°à³à²à³", "à²à²ªà³à²°à²¿à²²à³", "à²®à³", "à²à³à²¨à³", "à²à³à²²à³", "à²à²à²¸à³à²à³", "à²¸à³à²ªà³à²à²à²¬à²°à³", "à²à²à³à²à³à²¬à²°à³", "à²¨à²µà³à²à²¬à²°à³", "à²¡à²¿à²¸à³à²à²¬à²°à³"]
	    },
	    ml: {
	      // Malayalam
	      today: "à´à´¨àµà´¨àµ",
	      days: ["à´à´¾à´¯àµ¼.", "à´¤à´¿à´àµà´àµ¾.", "à´àµà´µàµà´µ.", "à´¬àµà´§àµ».", "à´µàµà´¯à´¾à´´à´.", "à´µàµà´³àµà´³à´¿.", "à´¶à´¨à´¿."],
	      months: ["à´à´¨àµà´µà´°à´¿", "à´«àµà´¬àµà´±àµà´µà´°à´¿", "à´®à´¾à´±àµà´àµà´àµ", "à´à´ªàµà´±à´¿à´²àµ", "à´®àµà´¯àµ", "à´àµà´£àµ", "à´àµà´²àµ", "à´à´à´¸àµà´±à´±àµ", "à´¸àµà´ªàµà´±à´±à´à´¬à´±àµ", "à´à´àµà´àµà´¬à´±àµ", "à´¨à´µà´à´¬à´±àµ", "à´¡à´¿à´¸à´à´¬à´±àµ"]
	    },
	    as: {
	      // Assamese
	      today: "à¦à¦à¦¿",
	      days: ["à¦¸à§à¦®.", "à¦®à¦à§à¦à¦².", "à¦¬à§à¦§.", "à¦¬à§à¦¹.", "à¦¶à§à¦à§à¦°.", "à¦¶à¦¨à¦¿.", "à§°à¦¬à¦¿."],
	      months: ["à¦à¦¾à¦¨à§à§±à¦¾à§°à§", "à¦«à§à¦¬à§à¦°à§à§±à¦¾à§°à§", "à¦®à¦¾à¦°à§à¦", "à¦à¦ªà§à¦°à¦¿à¦²", "à¦®à§", "à¦à§à¦¨", "à¦à§à¦²à¦¾à¦", "à¦à¦à¦·à§à¦", "à¦à§à¦ªà§à¦à§à¦®à§à¦¬à¦°", "à¦à¦à§à¦à§à¦¬à¦°", "à¦¨à¦¬à§à¦®à§à¦¬à¦°", "à¦¡à¦¿à¦à§à¦®à§à¦¬à¦°"]
	    },
	    mr: {
	      // Marathi
	      today: "à¤à¤",
	      days: ["à¤°à¤µà¤¿.", "à¤¸à¥à¤®.", "à¤®à¤à¤à¤³.", "à¤¬à¥à¤§.", "à¤à¥à¤°à¥.", "à¤¶à¥à¤à¥à¤°.", "à¤¶à¤¨à¤¿."],
	      months: ["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥", "à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥", "à¤®à¤¾à¤°à¥à¤", "à¤à¤ªà¥à¤°à¤¿à¤²", "à¤®à¥", "à¤à¥à¤¨", "à¤à¥à¤²à¥", "à¤à¤à¤¸à¥à¤", "à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°", "à¤à¤à¥à¤à¥à¤¬à¤°", "à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°", "à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"]
	    },
	    sa: {
	      // Sanskrit
	      today: "à¤à¤¦à¥à¤¯",
	      days: ["à¤°à¤µà¤¿à¤µà¤¾à¤¸à¤°à¤", "à¤¸à¥à¤®à¤µà¤¾à¤¸à¤°à¤", "à¤®à¤à¥à¤à¤²à¤µà¤¾à¤¸à¤°à¤", "à¤¬à¥à¤§à¤µà¤¾à¤¸à¤°à¤", "à¤à¥à¤°à¥à¤µà¤¾à¤¸à¤°à¤", "à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤¸à¤°à¤", "à¤¶à¤¨à¤¿à¤µà¤¾à¤¸à¤°à¤"],
	      months: ["à¤à¤¨à¤µà¤°à¥", "à¤«à¤°à¤µà¤°à¥", "à¤®à¤¾à¤°à¥à¤", "à¤à¤ªà¥à¤°à¥à¤²", "à¤®à¤", "à¤à¥à¤¨", "à¤à¥à¤²à¤¾à¤", "à¤à¤à¤¸à¥à¤¤", "à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°", "à¤à¤à¥à¤¤à¥à¤¬à¤°", "à¤¨à¤µà¤®à¥à¤¬à¤°", "à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°"]
	    },
	    mn: {
	      // Mongolian
	      today: "Ó©Ð½Ó©Ó©Ð´Ó©Ñ",
	      days: ["ÐÑ", "ÐÐ°", "ÐÑ", "ÐÑ", "ÐÒ¯", "ÐÐ°", "ÐÑ"],
	      months: ["1Â Ð´Ò¯Ð³ÑÑÑÂ ÑÐ°Ñ", "2Â Ð´ÑÐ³Ð°Ð°ÑÂ ÑÐ°Ñ", "3Â Ð´ÑÐ³Ð°Ð°ÑÂ ÑÐ°Ñ", "4Â Ð´Ò¯Ð³ÑÑÑÂ ÑÐ°Ñ", "5Â Ð´ÑÐ³Ð°Ð°ÑÂ ÑÐ°Ñ", "6Â Ð´ÑÐ³Ð°Ð°ÑÂ ÑÐ°Ñ", "7Â Ð´ÑÐ³Ð°Ð°ÑÂ ÑÐ°Ñ", "8Â Ð´ÑÐ³Ð°Ð°ÑÂ ÑÐ°Ñ", "9Â Ð´Ò¯Ð³ÑÑÑÂ ÑÐ°Ñ", "10Â Ð´ÑÐ³Ð°Ð°ÑÂ ÑÐ°Ñ", "11Â Ð´Ò¯Ð³ÑÑÑÂ ÑÐ°Ñ", "12Â Ð´ÑÐ³Ð°Ð°ÑÂ ÑÐ°Ñ"]
	    },
	    bo: {
	      // Tibetan
	      today: "à½à¼à½¢à½²à½",
	      days: ["à½à½²à¼à½à¼", "à½à¾³à¼à½à¼", "à½à½²à½à¼à½à½à½¢à¼", "à½£à¾·à½à¼à½à¼", "à½à½´à½¢à¼à½à½´à¼", "à½à¼à½¦à½à½¦à¼", "à½¦à¾¤à½ºà½à¼à½à¼"],
	      months: ["à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½à¼à½à½¼à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½à½²à½¦à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½¦à½´à½à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½à½²à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½£à¾à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à¾²à½´à½à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½à½´à½à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½¢à¾à¾±à½à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½à½´à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½à½´à¼à½à½¼à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½à½´à¼à½à½à½²à½à¼à½à¼", "à½¦à¾¤à¾±à½²à¼à½à¾³à¼à½à½à½´à¼à½à½à½²à½¦à¼à½à¼"]
	    },
	    cy: {
	      // Welsh
	      today: "heddiw",
	      days: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
	      months: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr"]
	    },
	    km: {
	      // Khmer
	      today: "ááááááá",
	      days: ["á¢á¶áá·.", "á.", "á¢.", "áá»", "áááá .", "áá».", "á."],
	      months: ["áááá¶", "áá»áááá", "áá·áá¶", "áááá¶", "á§ááá¶", "áá·áá»áá¶", "áááááá¶", "áá¸á á¶", "ááááá¶", "áá»áá¶", "áá·áááá·áá¶", "áááá¼"]
	    },
	    lo: {
	      // Lao
	      today: "à»àºàº¡àº·à»àºàºµà»",
	      days: ["àº­àº²àºàº´àº", "àºàº±àº", "àº­àº±àºàºàº²àº", "àºàº¸àº", "àºàº°àº«àº±àº", "àºªàº¸àº", "à»àºªàº»àº²"],
	      months: ["àº¡àº±àºàºàº­àº", "àºàº¸àº¡àºàº²", "àº¡àºµàºàº²", "à»àº¡àºªàº²", "àºàº¶àºàºªàº°àºàº²", "àº¡àº´àºàº¸àºàº²", "àºà»àº¥àº°àºàº»àº", "àºªàº´àºàº«àº²", "àºàº±àºàºàº²", "àºàº¸àº¥àº²", "àºàº°àºàº´àº", "àºàº±àºàº§àº²"]
	    },
	    gl: {
	      // Galician
	      today: "hoxe",
	      days: ["dom", "luns", "mar", "mÃ©r", "xov", "ven", "sÃ¡b"],
	      months: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xuÃ±o", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro"]
	    },
	    kok: {
	      // Konkani
	      today: "à¤à¤à¤¿",
	      days: ["à¤à¤¯.", "à¤¸à¥à¤®.", "à¤®à¤à¤à¤³.", "à¤¬à¥à¤§.", "à¤¬à¤¿à¤°à¥.", "à¤¸à¥à¤à¥à¤°.", "à¤¶à¥à¤¨."],
	      months: ["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥", "à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥", "à¤®à¤¾à¤°à¥à¤", "à¤à¤ªà¥à¤°à¤¿à¤²", "à¤®à¥", "à¤à¥à¤¨", "à¤à¥à¤²à¥", "à¤à¤à¤¸à¥à¤", "à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°", "à¤à¤à¥à¤à¥à¤¬à¤°", "à¤¨à¥à¤µà¥à¤®à¥à¤¬à¤°", "à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"]
	    },
	    syr: {
	      // Syriac
	      today: "ÜÜÜ¡Ü",
	      days: ["ÜÜÂ ÜÜÜ«", "ÜÜÂ ÜÜÜ«", "ÜÜÂ ÜÜÜ«", "ÜÜÂ ÜÜÜ«", "ÜÜÂ ÜÜÜ«", "ÜÜ¥ÜªÜÜ", "ÜÜ«Ü"],
	      months: ["ÜÜ¢ÜÜ¢Â ÜÜÜªÜ", "Ü«ÜÜ", "ÜÜÜª", "Ü¢ÜÜ£Ü¢", "ÜÜÜª", "ÜÜÜÜªÜ¢", "Ü¬Ü¡ÜÜ", "ÜÜ", "ÜÜÜ ÜÜ ", "Ü¬Ü«ÜªÜÂ Ü©ÜÜÜ¡", "Ü¬Ü«ÜªÜÂ ÜÜÜªÜ", "ÜÜ¢ÜÜ¢Â Ü©ÜÜÜ¡"]
	    },
	    si: {
	      // Sinhala
	      today: "à¶à¶¯",
	      days: ["à¶à¶»à·à¶¯à·", "à·à¶³à·à¶¯à·", "à¶à·à¶¢à¶¯à·", "à¶¶à·à¶¯à¶¯à·", "à¶à·à¶»à·à¶¯à·", "à¶à·à·à·à¶¯à·", "à·à¶±à·à¶¯à·"],
	      months: ["à¶¢à¶±à·à·à¶»à·", "à¶´à·à¶¶à¶»à·à·à¶»à·", "à¶¸à·à¶»à·à¶­à·", "à¶âà¶´à·âà¶»à·à¶½à·", "à¶¸à·à¶ºà·", "à¶¢à·à¶±à·", "à¶¢à·à¶½à·", "à¶âà¶à·à·à·à¶­à·", "à·à·à¶´à·à¶­à·à¶¸à·à¶¶à¶»à·", "à¶à¶à·à¶­à·à¶¶à¶»à·", "à¶±à·à·à·à¶¸à·à¶¶à¶»à·", "à¶¯à·à·à·à¶¸à·à¶¶à¶»à·"]
	    },
	    iu: {
	      // Inuktitut
	      today: "ullumi",
	      days: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
	      months: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri"]
	    },
	    am: {
	      // Amharic
	      today: "áá¬",
	      days: ["á¥ááµ", "á°á", "áá­á°", "á¨á¡á", "áááµ", "áá­á¥", "áá³á"],
	      months: ["ááá©ááª", "áá¥á©ááª", "áá­á½", "á¤áá¨á", "áá­", "áá", "ááá­", "á¦ááµáµ", "á´áá´áá á­", "á¦á­á°áá á­", "áá¬áá á­", "á²á´áá á­"]
	    },
	    tzm: {
	      // Tamazight
	      today: "assa",
	      days: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
	      months: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir"]
	    },
	    ne: {
	      // Nepali
	      today: "à¤à¤",
	      days: ["à¤à¤à¤¤", "à¤¸à¥à¤®", "à¤®à¤à¥à¤à¤²", "à¤¬à¥à¤§", "à¤¬à¤¿à¤¹à¥", "à¤¶à¥à¤à¥à¤°", "à¤¶à¤¨à¤¿"],
	      months: ["à¤à¤¨à¤µà¤°à¥", "à¤«à¥à¤¬à¥à¤°à¥à¤à¤°à¥", "à¤®à¤¾à¤°à¥à¤", "à¤à¤ªà¥à¤°à¤¿à¤²", "à¤®à¥", "à¤à¥à¤¨", "à¤à¥à¤²à¤¾à¤", "à¤à¤à¤¸à¥à¤¤", "à¤¸à¥à¤ªà¥à¤à¥à¤®à¥à¤¬à¤°", "à¤à¤à¥à¤à¥à¤¬à¤°", "à¤¨à¥à¤­à¥à¤®à¥à¤¬à¤°", "à¤¡à¤¿à¤¸à¥à¤®à¥à¤¬à¤°"]
	    },
	    fy: {
	      // Frisian
	      today: "hjoed",
	      days: ["Sn", "Mo", "Ti", "Wo", "To", "Fr", "Sn"],
	      months: ["jannewaris", "febrewaris", "maart", "april", "maaie", "juny", "july", "augustus", "septimber", "oktober", "novimber", "desimber"]
	    },
	    ps: {
	      // Pashto
	      today: "ÙÙ ÙØ±Ú",
	      days: ["Ø§ÙØ£Ø­Ø¯", "Ø§ÙØ¥Ø«ÙÙÙ", "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡", "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡", "Ø§ÙØ®ÙÙØ³", "Ø§ÙØ¬ÙØ¹Ø©", "Ø§ÙØ³Ø¨Øª"],
	      months: ["ÙØ­Ø±Ù", "ØµÙØ±", "Ø±Ø¨ÙØ¹Â Ø§ÙØ£ÙÙ", "Ø±Ø¨ÙØ¹Â Ø§ÙØ«Ø§ÙÙ", "Ø¬ÙØ§Ø¯ÙÂ Ø§ÙØ£ÙÙÙ", "Ø¬ÙØ§Ø¯ÙÂ Ø§ÙØ«Ø§ÙÙØ©", "Ø±Ø¬Ø¨", "Ø´Ø¹Ø¨Ø§Ù", "Ø±ÙØ¶Ø§Ù", "Ø´ÙØ§Ù", "Ø°ÙÂ Ø§ÙÙØ¹Ø¯Ø©", "Ø°ÙÂ Ø§ÙØ­Ø¬Ø©"]
	    },
	    fil: {
	      // Filipino
	      today: "ngayon",
	      days: ["Lin", "Lun", "Mar", "Mier", "Hueb", "Bier", "Saba"],
	      months: ["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre"]
	    },
	    dv: {
	      // Divehi
	      today: "ÞÞ¨ÞÞ¦ÞÞª",
	      days: ["ÞÞ§ÞÞ©ÞÞ°ÞÞ¦", "ÞÞ¯ÞÞ¦", "ÞÞ¦ÞÞ°ÞÞ§ÞÞ¦", "ÞÞªÞÞ¦", "ÞÞªÞÞ§ÞÞ°ÞÞ¦ÞÞ¨", "ÞÞªÞÞªÞÞª", "ÞÞ®ÞÞ¨ÞÞ¨ÞÞª"],
	      months: ["ÞÞªÞÞ¦ÞÞ°ÞÞ¦ÞÞ°", "ÞÞ¦ÞÞ¦ÞÞª", "ÞÞ¦ÞÞ©Þ¢ÞªÞÞ°ÞÞ¦ÞÞ°ÞÞ¦ÞÞ°", "ÞÞ¦ÞÞ©Þ¢ÞªÞÞ°ÞÞ§ÞÞ¨ÞÞª", "ÞÞªÞÞ§ÞÞ¦ÞÞ°ÞÞ«ÞÞ§", "ÞÞªÞÞ§ÞÞ¦ÞÞ°ÞÞ§ÞÞ¨ÞÞ§", "ÞÞ¦ÞÞ¦ÞÞ°", "ÞÞ¦Þ¢Þ°ÞÞ§ÞÞ°", "ÞÞ¦ÞÞ¦ÞÞ§ÞÞ°", "ÞÞ¦ÞÞ°ÞÞ§ÞÞ°", "ÞÞªÞÞ°Þ¤Þ¦Þ¢Þ¨ÞÞ§", "ÞÞªÞÞ°ÞÞ¨ÞÞ°ÞÞ§"]
	    },
	    ha: {
	      // Hausa
	      today: "yau",
	      days: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
	      months: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba"]
	    },
	    yo: {
	      // Yoruba
	      today: "loni",
	      days: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
	      months: ["Osu kinni", "Osu keji", "Osu keta", "Osu kerin", "Osu karun", "Osu kefa", "Osu keje", "Osu kejo", "Osu kesan", "Osu kewa", "Osu kokanla", "Osu keresi"]
	    },
	    quz: {
	      // Quechua
	      today: "kunan",
	      days: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
	      months: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi"]
	    },
	    nso: {
	      // Sesotho sa Leboa
	      today: "Lehono",
	      days: ["Lam", "MoÅ¡", "Lbb", "Lbr", "Lbn", "Lbh", "Mok"],
	      months: ["Pherekgong", "Hlakola", "Mopitlo", "Moranang", "Mosegamanye", "NgoatoboÅ¡ego", "Phuphu", "Phato", "Lewedi", "Diphalana", "Dibatsela", "Manthole"]
	    },
	    ba: {
	      // Bashkir
	      today: "Ð±Ó©Ð³Ó©Ð½",
	      days: ["ÐÑ", "ÐÑ", "Ð¨Ñ", "Ð¨Ñ", "ÐÑ", "ÐÐ¼", "Ð¨Ð±"],
	      months: ["ÒÐ¸Ð½ÑÐ°Ñ", "ÑÐµÐ²ÑÐ°Ð»Ñ", "Ð¼Ð°ÑÑ", "Ð°Ð¿ÑÐµÐ»Ñ", "Ð¼Ð°Ð¹", "Ð¸ÑÐ½Ñ", "Ð¸ÑÐ»Ñ", "Ð°Ð²Ð³ÑÑÑ", "ÑÐµÐ½ÑÑÐ±ÑÑ", "Ð¾ÐºÑÑÐ±ÑÑ", "Ð½Ð¾ÑÐ±ÑÑ", "Ð´ÐµÐºÐ°Ð±ÑÑ"]
	    },
	    lb: {
	      // Luxembourgish
	      today: "haut",
	      days: ["Son", "MÃ©i", "DÃ«n", "MÃ«t", "Don", "Fre", "Sam"],
	      months: ["Januar", "Februar", "MÃ¤erz", "AbrÃ«ll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]
	    },
	    kl: {
	      // Greenlandic
	      today: "ullumi",
	      days: ["sap", "ata", "mar", "ping", "sis", "tal", "arf"],
	      months: ["januari", "februari", "martsi", "apriili", "maaji", "juni", "juli", "aggusti", "septembari", "oktobari", "novembari", "decembari"]
	    },
	    ig: {
	      // Igbo
	      today: "taa",
	      days: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
	      months: ["Onwa mbu", "Onwa ibua", "Onwa ato", "Onwa ano", "Onwa ise", "Onwa isi", "Onwa asa", "Onwa asato", "Onwa itolu", "Onwa iri", "Onwa iri n'ofu", "Onwa iri n'ibua"]
	    },
	    ii: {
	      // Yi
	      today: "êê",
	      days: ["ê­ê", "êê", "êê", "êê", "êê", "êê¬", "êê"],
	      months: ["êêª", "êêª", "êêª", "êêª", "ê¬êª", "êêª", "êêª", "êêª", "ê¬êª", "ê°êª", "ê¯êªêª", "ê°êêª"]
	    },
	    arn: {
	      // Mapudungun
	      today: "fachantÃ¼",
	      days: ["dom", "lun", "mar", "miÃ©", "jue", "vie", "sÃ¡b"],
	      months: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
	    },
	    moh: {
	      // Mohawk
	      today: "okÃ ra",
	      days: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	      months: ["TsothohrkÃ³:Wa", "Enniska", "EnniskÃ³:Wa", "OnerahtÃ³kha", "OnerahtohkÃ³:Wa", "Ohiari:Ha", "OhiarihkÃ³:Wa", "SeskÃ©ha", "SeskehkÃ³:Wa", "KentÃ©nha", "KentenhkÃ³:Wa", "TsothÃ³hrha"]
	    },
	    br: {
	      // Breton
	      today: "hiziv",
	      days: ["Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."],
	      months: ["Genver", "C'hwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu"]
	    },
	    ug: {
	      // Uyghur
	      today: "bÃ¼gÃ¼n",
	      days: ["ÙÛ", "Ø¯Û", "Ø³Û", "ÚØ§", "Ù¾Û", "Ø¬Û", "Ø´Û"],
	      months: ["1-Ø¦Ø§Ù", "2-Ø¦Ø§Ù", "3-Ø¦Ø§Ù", "4-Ø¦Ø§Ù", "5-Ø¦Ø§Ù", "6-Ø¦Ø§Ù", "7-Ø¦Ø§Ù", "8-Ø¦Ø§Ù", "9-Ø¦Ø§Ù", "10-Ø¦Ø§Ù", "11-Ø¦Ø§Ù", "12-Ø¦Ø§Ù"]
	    },
	    mi: {
	      // Maori
	      today: "i tenei ra",
	      days: ["Ta", "Hi", "TÅ«", "Apa", "Pa", "Me", "Ho"],
	      months: ["Kohi-tÄtea", "Hui-tanguru", "PoutÅ«-te-rangi", "Paenga-whÄwhÄ", "Haratua", "Pipiri", "HÅngongoi", "Here-turi-kÅkÄ", "Mahuru", "Whiringa-Ä-nuku", "Whiringa-Ä-rangi", "Hakihea"]
	    },
	    oc: {
	      // Occitan
	      today: "uÃ¨i",
	      days: ["dim.", "lun.", "mar.", "mÃ¨c.", "jÃ²u.", "ven.", "sab."],
	      months: ["genier", "febrier", "marÃ§", "abril", "mai", "junh", "julh", "agost", "setembre", "octobre", "novembre", "desembre"]
	    },
	    co: {
	      // Corsican
	      today: "oghje",
	      days: ["dum.", "lun.", "mar.", "mer.", "ghj.", "ven.", "sab."],
	      months: ["ghjennaghju", "ferraghju", "marzu", "aprile", "maghju", "ghjunghju", "lugliu", "aostu", "settembre", "ottobre", "nuvembre", "dicembre"]
	    },
	    gsw: {
	      // Alsatian
	      today: "heit",
	      days: ["Su.", "Mo.", "Di.", "Mi.", "Du.", "Fr.", "SÃ ."],
	      months: ["JÃ¤nner", "Feverje", "MÃ¤rz", "Ãpril", "Mai", "JÃ¼ni", "JÃ¼li", "Augscht", "September", "Oktower", "Nowember", "Dezember"]
	    },
	    sah: {
	      // Yakut
	      today: "bÃ¼gÃ¼n",
	      days: ["ÐÑ", "ÐÐ½", "ÐÐ¿", "Ð¡Ñ", "Ð§Ð¿", "ÐÑ", "Ð¡Ð±"],
	      months: ["Ð¢Ð¾ÑÑÑÐ½Ð½ÑÑ", "ÐÐ»ÑÐ½Ð½ÑÑ", "ÐÑÐ»ÑÐ½ ÑÑÑÐ°Ñ", "ÐÑÑÑ ÑÑÑÐ°Ñ", "Ð«Ð°Ð¼ ÑÐ¹Ð°", "ÐÑÑ ÑÐ¹Ð°", "ÐÑ ÑÐ¹Ð°", "ÐÑÑÑÐ´ÑÐ°Ñ ÑÐ¹Ð°", "ÐÐ°Ð»Ð°ÒÐ°Ð½ ÑÐ¹Ð°", "ÐÐ»ÑÑÐ½Ð½ÑÑ", "Ð¡ÑÑÐ¸Ð½Ð½ÑÐ¸", "ÐÑÑÑÐ½Ð½ÑÑ"]
	    },
	    qut: {
	      // K'iche
	      today: "[kamik]",
	      days: ["juq", "kaq", "oxq", "kajq", "joq", "waqq", "wuqq"],
	      months: ["nab'e ik'", "ukab' ik'", "rox ik'", "ukaj ik'", "uro' ik'", "uwaq ik'", "uwuq ik'", "uwajxaq ik'", "ub'elej ik'", "ulaj ik'", "ujulaj ik'", "ukab'laj ik'"]
	    },
	    rw: {
	      // Kinyarwanda
	      today: "uyu munsi",
	      days: ["mbe.", "kab.", "gat.", "kan.", "gat.", "gat.", "cyu."],
	      months: ["Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeli", "Ukwakira", "Ugushyingo", "Ukuboza"]
	    },
	    wo: {
	      // Wolof
	      today: "tey",
	      days: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
	      months: ["janvier", "fÃ©vrier", "mars", "avril", "mai", "juin", "juillet", "aoÃ»t", "septembre", "octobre", "novembre", "dÃ©cembre"]
	    },
	    prs: {
	      // Dari
	      today: "Ø§ÙØ±ÙØ²",
	      days: ["Ø§ÙØ£Ø­Ø¯", "Ø§ÙØ¥Ø«ÙÙÙ", "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡", "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡", "Ø§ÙØ®ÙÙØ³", "Ø§ÙØ¬ÙØ¹Ø©", "Ø§ÙØ³Ø¨Øª"],
	      months: ["ÙØ­Ø±Ù", "ØµÙØ±", "Ø±Ø¨ÙØ¹Â Ø§ÙØ£ÙÙ", "Ø±Ø¨ÙØ¹Â Ø§ÙØ«Ø§ÙÙ", "Ø¬ÙØ§Ø¯ÙÂ Ø§ÙØ£ÙÙÙ", "Ø¬ÙØ§Ø¯ÙÂ Ø§ÙØ«Ø§ÙÙØ©", "Ø±Ø¬Ø¨", "Ø´Ø¹Ø¨Ø§Ù", "Ø±ÙØ¶Ø§Ù", "Ø´ÙØ§Ù", "Ø°ÙÂ Ø§ÙÙØ¹Ø¯Ø©", "Ø°ÙÂ Ø§ÙØ­Ø¬Ø©"]
	    },
	    gd: {
	      // Scottish Gaelic
	      today: "an-diugh",
	      days: ["DÃ²m", "Lua", "MÃ i", "Cia", "Ard", "Hao", "Sat"],
	      months: ["Am Faoilleach", "An Gearran", "Am MÃ rt", "An Giblean", "An CÃ¨itean", "An t-Ãgmhios", "An t-Iuchar", "An LÃ¹nastal", "An t-Sultain", "An DÃ mhair", "An t-Samhain", "An DÃ¹bhlachd"]
	    },
	    smn: {
	      // Sami (Inari)
	      today: "onne",
	      days: ["pa", "vu", "ma", "ko", "tu", "vÃ¡", "lÃ¡"],
	      months: ["uÄÄÃ¢ivemÃ¡Ã¡nu", "kuovÃ¢mÃ¡Ã¡nu", "njuhÄÃ¢mÃ¡Ã¡nu", "cuÃ¡ÅuimÃ¡Ã¡nu", "vyesimÃ¡Ã¡nu", "kesimÃ¡Ã¡nu", "syeinimÃ¡Ã¡nu", "porgemÃ¡Ã¡nu", "ÄohÄÃ¢mÃ¡Ã¡nu", "roovvÃ¢dmÃ¡Ã¡nu", "skammÃ¢mÃ¡Ã¡nu", "juovlÃ¢mÃ¡Ã¡nu"]
	    },
	    sms: {
	      // Sami (Skolt)
	      today: "pei Ìvv",
	      days: ["pÃ¢", "vu", "mÃ¢", "se", "ne", "pi", "su"],
	      months: ["oÄÄeeÂ´jjmÃ¤Ã¤n", "tÃ¤Â´lvvmÃ¤Ã¤n", "pÃ¢Â´zzlÃ¢Å¡ttammÃ¤Ã¤n", "njuhÄÄmÃ¤Ã¤n", "vueÂ´ssmÃ¤Ã¤n", "Ç©ieÂ´ssmÃ¤Ã¤n", "sueiÂ´nnmÃ¤Ã¤n", "pÃ¥Â´rÇ§Ç§mÃ¤Ã¤n", "ÄÃµhÄÄmÃ¤Ã¤n", "kÃ¥lggmÃ¤Ã¤n", "skammÂ´mÃ¤Ã¤n", "rosttovmÃ¤Ã¤n"]
	    },
	    zh: {
	      // Simplified Chinese 
	      days: ["ææå¤©", "ææä¸", "ææäº", "ææä¸", "ææå", "ææäº", "ææå­"],
	      months: ["ä¸æ", "äºæ", "ä¸æ", "åæ", "äºæ", "å­æ", "ä¸æ", "å«æ", "ä¹æ", "åæ", "åä¸æ", "åäºæ"],
	      today: "ä»å¤©"
	    },
	    "zh-hans": {
	      //Simplified Chinese, informal
	      days: ["å¨æ¥", "å¨ä¸", "å¨äº", "å¨ä¸", "å¨å", "å¨äº", "å¨å­"],
	      months: ["ä¸æ", "äºæ", "ä¸æ", "åæ", "äºæ", "å­æ", "ä¸æ", "å«æ", "ä¹æ", "åæ", "åä¸æ", "åäºæ"],
	      today: "ä»å¤©"
	    },
	    "zh-hant": {
	      // Traditional Chinese
	      days: ["é±æ¥", "é±ä¸", "é±äº", "é±ä¸", "é±å", "é±äº", "é±å­"],
	      months: ["ä¸æ", "äºæ", "ä¸æ", "åæ", "äºæ", "å­æ", "ä¸æ", "å«æ", "ä¹æ", "åæ", "åä¸æ", "åäºæ"],
	      today: "ä»å¤©"
	    },
	    nn: {
	      // Norwegian (Nynorsk)
	      today: "i dag",
	      days: ["sÃ¸", "mÃ¥", "ty", "on", "to", "fr", "la"],
	      months: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
	    },
	    bs: {
	      // Bosnian
	      today: "danas",
	      days: ["ned", "pon", "uto", "sri", "Äet", "pet", "sub"],
	      months: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar"]
	    },
	    sma: {
	      // Sami (Southern)
	      today: "daenbiejjien",
	      days: ["aej", "mÃ¥a", "dÃ¦j", "gask", "duar", "bearj", "laav"],
	      months: ["tsÃ¯engele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mÃ¯etske", "skÃ¯erede", "golke", "rahka", "goeve"]
	    },
	    nb: {
	      // Norwegian (BokmÃ¥l)
	      today: "i dag",
	      days: ["sÃ¸", "ma", "ti", "on", "to", "fr", "lÃ¸"],
	      months: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
	    },
	    sr: {
	      // Serbian
	      today: "Ð´Ð°Ð½Ð°Ñ",
	      days: ["ned", "pon", "uto", "sre", "Äet", "pet", "sub"],
	      months: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar"]
	    },
	    dsb: {
	      // Lower Sorbian
	      today: "Åºinsa",
	      days: ["nje", "pon", "waÅ", "srj", "stw", "pÄt", "sob"],
	      months: ["januar", "februar", "mÄrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december"]
	    },
	    smj: {
	      // Sami (Lule)
	      today: "uddni",
	      days: ["Ã¡jl", "mÃ¡n", "dis", "gas", "duor", "bier", "lÃ¡v"],
	      months: ["Ã¥dÃ¥jakmÃ¡nno", "guovvamÃ¡nno", "sjnjuktjamÃ¡nno", "vuoratjismÃ¡nno", "moarmesmÃ¡nno", "biehtsemÃ¡nno", "sjnjilltjamÃ¡nno", "bÃ¥rggemÃ¡nno", "ragÃ¡tmÃ¡nno", "gÃ¥lgÃ¥dismÃ¡nno", "basÃ¡dismÃ¡nno", "javllamÃ¡nno"]
	    }
	  };
	}

	var Input = /*#__PURE__*/function () {
	  function Input(input) {
	    var _this3 = this;

	    _classCallCheck(this, Input);

	    this.element = input;
	    this.element.setAttribute(pickerAppliedAttr, '');

	    if (dateInputIsSupported) {
	      // this wil both prevent the native datepicker displaying AND allow asigning a value attribute which is not ISO8601 compliant
	      this.element.type = 'date-polyfill'; // this.element.addEventListener('click', preventDefault);
	    }

	    var langEl = this.element,
	        lang = '';

	    while (langEl.parentNode) {
	      lang = langEl.getAttribute('lang');

	      if (lang) {
	        break;
	      }

	      langEl = langEl.parentNode;
	    }

	    this.setLocaleText(lang);

	    if (!this.element.placeholder) {
	      this.element.placeholder = this.localeText.format.replace('M', 'mm').replace('D', 'dd').replace('Y', 'yyyy');
	    }

	    var valuePropDescriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.element), 'value');

	    if (valuePropDescriptor === null) {
	      valuePropDescriptor = (_readOnlyError("valuePropDescriptor"), {
	        get: function get() {
	          return _this3.element.getAttribute('value');
	        },
	        set: function set() {}
	      });
	      console.log("nodep-date-input-polyfill: unable to obtain native input[type=date] .value propertyDescriptor");
	    }

	    Object.defineProperties(this.element, {
	      'textValue': {
	        get: valuePropDescriptor.get,
	        set: valuePropDescriptor.set
	      },
	      'value': {
	        get: function get() {
	          return _this3.element.polyfillValue;
	        },
	        set: function set(val) {
	          if (!/^\d{4}-\d{2}-\d{2}$/.test(val)) {
	            _this3.element.polyfillValue = _this3.element.textValue = '';

	            _this3.element.setAttribute('value', '');

	            return;
	          }

	          _this3.element.polyfillValue = val;
	          var YMD = val.split("-");
	          _this3.element.textValue = _this3.localeText.format.replace("Y", YMD[0]).replace("M", YMD[1]).replace("D", YMD[2]);

	          _this3.element.setAttribute("value", _this3.element.textValue);
	        }
	      },
	      'valueAsDate': {
	        get: function get() {
	          if (!_this3.element.polyfillValue) {
	            return null;
	          }

	          return new Date(_this3.element.polyfillValue);
	        },
	        set: function set(val) {
	          if (val === null || isNaN(val.getTime())) {
	            _this3.element.value = '';
	          } else {
	            _this3.element.value = val.toISOString().slice(0, 10);
	          }
	        }
	      },
	      'valueAsNumber': {
	        get: function get() {
	          if (!_this3.element.value) {
	            return NaN;
	          }

	          return _this3.element.valueAsDate.getTime();
	        },
	        set: function set(val) {
	          _this3.element.valueAsDate = new Date(val);
	        }
	      }
	    }); // Initialize value for display.

	    this.element.value = this.element.getAttribute('value'); // Open the picker when the input get focus,
	    // also on various click events to capture it in all corner cases.

	    var showPicker = function showPicker() {
	      Picker.instance.attachTo(_this3);
	    };

	    var passiveOpt = {
	      passive: true
	    };
	    this.element.addEventListener('focus', showPicker, passiveOpt);
	    this.element.addEventListener('mousedown', showPicker, passiveOpt);
	    this.element.addEventListener('mouseup', showPicker, passiveOpt); // Update the picker if the date changed manually in the input.

	    this.element.addEventListener('keydown', function (e) {
	      var beginValue = _this3.element.valueAsDate;
	      var requirePing = true;
	      var requireParse = false;

	      switch (e.keyCode) {
	        case 9:
	        case 27:
	          Picker.instance.hide();
	          requirePing = false;
	          break;

	        case 38:
	          if (beginValue === null) {
	            beginValue = new Date();
	          }

	          beginValue.setDate(beginValue.getDate() + 1);
	          _this3.element.valueAsDate = beginValue;
	          break;

	        case 40:
	          if (beginValue === null) {
	            beginValue = new Date();
	          }

	          beginValue.setDate(beginValue.getDate() - 1);
	          _this3.element.valueAsDate = beginValue;
	          break;

	        default:
	          requireParse = true;
	      }

	      if (requirePing) {
	        if (requireParse) {
	          var self = _this3;
	          setTimeout(function () {
	            var parseDt = self.localeText.parseLocale(self.element.textValue);

	            if (parseDt) {
	              parseDt.setTime(parseDt.getTime() - parseDt.getTimezoneOffset() * 60000);
	            }

	            if (+parseDt !== +self.element.valueAsDate) {
	              self.element.valueAsDate = parseDt;
	              Picker.instance.pingInput();
	              Picker.instance.sync();
	            }
	          }, 1);
	        } else {
	          Picker.instance.pingInput();
	          Picker.instance.sync();
	        }
	      }
	    }, passiveOpt);
	  }

	  _createClass(Input, [{
	    key: "setLocaleText",
	    value: function setLocaleText(elementLang) {
	      var preferredLocales = window.navigator.languages ? _toConsumableArray(window.navigator.languages) : [window.navigator.userLanguage || window.navigator.language]; // user browser preference 1st then element language - arguably should unshift here, or could get complex and 
	      // differentiate element language only (length===2) from language and culture both defined on a containing element

	      if (elementLang) {
	        preferredLocales.push(elementLang);
	      }

	      var li = getLanguageInfo(preferredLocales); // First, look for an exact match to the provided locale.
	      // for (const pl of preferredLocales) { - with current core-js polyfills this will import Symbol polyfill, which is unnecessary bloat

	      this.locale = li.locale;
	      this.localeText = li;
	    }
	  }], [{
	    key: "pendingDateInputs",
	    value: function pendingDateInputs() {
	      '[data-nodep-date-input-polyfill-debug]';
	    }
	  }]);

	  return Input;
	}();

	function addPickers() {
	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref$watchForInsert = _ref.watchForInsert,
	      watchForInsert = _ref$watchForInsert === void 0 ? false : _ref$watchForInsert,
	      _ref$allowForcePicker = _ref.allowForcePicker,
	      allowForcePicker = _ref$allowForcePicker === void 0 ? false : _ref$allowForcePicker;

	  Picker.instance = new Picker();
	  var findHelper = new FindInputsHelper({
	    allowForcePicker: allowForcePicker
	  }); // Get and loop all the input[type="date"]s in the page that do not have `[data-has-picker]` yet.

	  findHelper.getAllInputsForPolyfilling().forEach(function (di) {
	    return new Input(di);
	  });

	  if (watchForInsert) {
	    var observer = new MutationObserver(function (mutations) {
	      return mutations.forEach(function (m) {
	        if (m.type === 'childList') {
	          m.addedNodes.forEach(function (el) {
	            if (el.nodeType === Node.ELEMENT_NODE) {
	              // [el, ...el.querySelectorAll('input[type=date]')] should do, but some problem with transpilling
	              // firefox fine with same transpile, but IE somehow tries to implement es.string.iterator rather than nodelist!
	              var nodes = Array.from(el.querySelectorAll('input[type=date]'));
	              nodes.push(el);
	              nodes.forEach(function (inpt) {
	                if (findHelper.requiresPolyfilling(inpt)) {
	                  new Input(inpt);
	                }
	              });
	            }
	          });
	        }
	      });
	    }); // call `observe` on that MutationObserver instance, 
	    // passing it the element to observe, and the options object

	    observer.observe(document.body, {
	      childList: true,
	      attributes: false,
	      subtree: true
	    }); // this might not be the best way to handle this as it will not add placeholder until clicked

	    /*
	    document.body.addEventListener('mousedown', (evt)=> {
	        if (findHelper.requiresPolyfilling(evt.target)) {
	            return new Input(evt.target);
	        }
	    }, { passive: true });
	    */
	  }
	}

	var addPickers08ced8bc = /*#__PURE__*/Object.freeze({
		__proto__: null,
		addPickers: addPickers
	});

}());
//# sourceMappingURL=gest-age.nomodule.js.map
